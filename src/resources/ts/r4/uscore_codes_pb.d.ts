// package: google.fhir.r4.uscore
// file: proto/r4/uscore_codes.proto

import * as jspb from "google-protobuf";
import * as proto_annotations_pb from "../../proto/annotations_pb";

export class RaceAndEthnicityCDCCode extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RaceAndEthnicityCDCCode.AsObject;
  static toObject(includeInstance: boolean, msg: RaceAndEthnicityCDCCode): RaceAndEthnicityCDCCode.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RaceAndEthnicityCDCCode, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RaceAndEthnicityCDCCode;
  static deserializeBinaryFromReader(message: RaceAndEthnicityCDCCode, reader: jspb.BinaryReader): RaceAndEthnicityCDCCode;
}

export namespace RaceAndEthnicityCDCCode {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    RACE: 1;
    AMERICAN_INDIAN_OR_ALASKA_NATIVE: 2;
    AMERICAN_INDIAN: 3;
    ALASKA_NATIVE: 4;
    ABENAKI: 5;
    ALGONQUIAN: 6;
    APACHE: 7;
    ARAPAHO: 8;
    ARIKARA: 9;
    ASSINIBOINE: 10;
    ASSINIBOINE_SIOUX: 11;
    BANNOCK: 12;
    BLACKFEET: 13;
    BROTHERTON: 14;
    BURT_LAKE_BAND: 15;
    CADDO: 16;
    CAHUILLA: 17;
    CALIFORNIA_TRIBES: 18;
    CANADIAN_AND_LATIN_AMERICAN_INDIAN: 19;
    CATAWBA: 20;
    CAYUSE: 21;
    CHEHALIS: 22;
    CHEMAKUAN: 23;
    CHEMEHUEVI: 24;
    CHEROKEE: 25;
    CHEROKEE_SHAWNEE: 26;
    CHEYENNE: 27;
    CHEYENNE_ARAPAHO: 28;
    CHICKAHOMINY: 29;
    CHICKASAW: 30;
    CHINOOK: 31;
    CHIPPEWA: 32;
    CHIPPEWA_CREE: 33;
    CHITIMACHA: 34;
    CHOCTAW: 35;
    CHUMASH: 36;
    CLEAR_LAKE: 37;
    COEUR_D_ALENE: 38;
    COHARIE: 39;
    COLORADO_RIVER: 40;
    COLVILLE: 41;
    COMANCHE: 42;
    COOS_LOWER_UMPQUA_SIUSLAW: 43;
    COOS: 44;
    COQUILLES: 45;
    COSTANOAN: 46;
    COUSHATTA: 47;
    COWLITZ: 48;
    CREE: 49;
    CREEK: 50;
    CROATAN: 51;
    CROW: 52;
    CUPENO: 53;
    DELAWARE: 54;
    DIEGUENO: 55;
    EASTERN_TRIBES: 56;
    ESSELEN: 57;
    FORT_BELKNAP: 58;
    FORT_BERTHOLD: 59;
    FORT_MCDOWELL: 60;
    FORT_HALL: 61;
    GABRIELENO: 62;
    GRAND_RONDE: 63;
    GROS_VENTRES: 64;
    HALIWA: 65;
    HIDATSA: 66;
    HOOPA: 67;
    HOOPA_EXTENSION: 68;
    HOUMA: 69;
    INAJA_COSMIT: 70;
    IOWA: 71;
    IROQUOIS: 72;
    JUANENO: 73;
    KALISPEL: 74;
    KARUK: 75;
    KAW: 76;
    KICKAPOO: 77;
    KIOWA: 78;
    KLALLAM: 79;
    KLAMATH: 80;
    KONKOW: 81;
    KOOTENAI: 82;
    LASSIK: 83;
    LONG_ISLAND: 84;
    LUISENO: 85;
    LUMBEE: 86;
    LUMMI: 87;
    MAIDU: 88;
    MAKAH: 89;
    MALISEET: 90;
    MANDAN: 91;
    MATTAPONI: 92;
    MENOMINEE: 93;
    MIAMI: 94;
    MICCOSUKEE: 95;
    MICMAC: 96;
    MISSION_INDIANS: 97;
    MIWOK: 98;
    MODOC: 99;
    MOHEGAN: 100;
    MONO: 101;
    NANTICOKE: 102;
    NARRAGANSETT: 103;
    NAVAJO: 104;
    NEZ_PERCE: 105;
    NOMALAKI: 106;
    NORTHWEST_TRIBES: 107;
    OMAHA: 108;
    OREGON_ATHABASKAN: 109;
    OSAGE: 110;
    OTOE_MISSOURIA: 111;
    OTTAWA: 112;
    PAIUTE: 113;
    PAMUNKEY: 114;
    PASSAMAQUODDY: 115;
    PAWNEE: 116;
    PENOBSCOT: 117;
    PEORIA: 118;
    PEQUOT: 119;
    PIMA: 120;
    PISCATAWAY: 121;
    PIT_RIVER: 122;
    POMO: 123;
    PONCA: 124;
    POTAWATOMI: 125;
    POWHATAN: 126;
    PUEBLO: 127;
    PUGET_SOUND_SALISH: 128;
    QUAPAW: 129;
    QUINAULT: 130;
    RAPPAHANNOCK: 131;
    RENO_SPARKS: 132;
    ROUND_VALLEY: 133;
    SAC_AND_FOX: 134;
    SALINAN: 135;
    SALISH: 136;
    SALISH_AND_KOOTENAI: 137;
    SCHAGHTICOKE: 138;
    SCOTT_VALLEY: 139;
    SEMINOLE: 140;
    SERRANO: 141;
    SHASTA: 142;
    SHAWNEE: 143;
    SHINNECOCK: 144;
    SHOALWATER_BAY: 145;
    SHOSHONE: 146;
    SHOSHONE_PAIUTE: 147;
    SILETZ: 148;
    SIOUX: 149;
    SIUSLAW: 150;
    SPOKANE: 151;
    STEWART: 152;
    STOCKBRIDGE: 153;
    SUSANVILLE: 154;
    TOHONO_O_ODHAM: 155;
    TOLOWA: 156;
    TONKAWA: 157;
    TYGH: 158;
    UMATILLA: 159;
    UMPQUA: 160;
    UTE: 161;
    WAILAKI: 162;
    WALLA_WALLA: 163;
    WAMPANOAG: 164;
    WARM_SPRINGS: 165;
    WASCOPUM: 166;
    WASHOE: 167;
    WICHITA: 168;
    WIND_RIVER: 169;
    WINNEBAGO: 170;
    WINNEMUCCA: 171;
    WINTUN: 172;
    WIYOT: 173;
    YAKAMA: 174;
    YAKAMA_COWLITZ: 175;
    YAQUI: 176;
    YAVAPAI_APACHE: 177;
    YOKUTS: 178;
    YUCHI: 179;
    YUMAN: 180;
    YUROK: 181;
    CHIRICAHUA: 182;
    FORT_SILL_APACHE: 183;
    JICARILLA_APACHE: 184;
    LIPAN_APACHE: 185;
    MESCALERO_APACHE: 186;
    OKLAHOMA_APACHE: 187;
    PAYSON_APACHE: 188;
    SAN_CARLOS_APACHE: 189;
    WHITE_MOUNTAIN_APACHE: 190;
    NORTHERN_ARAPAHO: 191;
    SOUTHERN_ARAPAHO: 192;
    WIND_RIVER_ARAPAHO: 193;
    FORT_PECK_ASSINIBOINE_SIOUX: 194;
    OKLAHOMA_CADO: 195;
    AGUA_CALIENTE_CAHUILLA: 196;
    AUGUSTINE: 197;
    CABAZON: 198;
    LOS_COYOTES: 199;
    MORONGO: 200;
    SANTA_ROSA_CAHUILLA: 201;
    TORRES_MARTINEZ: 202;
    CAHTO: 203;
    CHIMARIKO: 204;
    COAST_MIWOK: 205;
    DIGGER: 206;
    KAWAIISU: 207;
    KERN_RIVER: 208;
    MATTOLE: 209;
    RED_WOOD: 210;
    SANTA_ROSA: 211;
    TAKELMA: 212;
    WAPPO: 213;
    YANA: 214;
    YUKI: 215;
    CANADIAN_INDIAN: 216;
    CENTRAL_AMERICAN_INDIAN_1070_2: 217;
    FRENCH_AMERICAN_INDIAN: 218;
    MEXICAN_AMERICAN_INDIAN_1072_8: 219;
    SOUTH_AMERICAN_INDIAN_1073_6: 220;
    SPANISH_AMERICAN_INDIAN: 221;
    HOH: 222;
    QUILEUTE: 223;
    CHEROKEE_ALABAMA: 224;
    CHEROKEES_OF_NORTHEAST_ALABAMA: 225;
    CHEROKEES_OF_SOUTHEAST_ALABAMA: 226;
    EASTERN_CHEROKEE: 227;
    ECHOTA_CHEROKEE: 228;
    ETOWAH_CHEROKEE: 229;
    NORTHERN_CHEROKEE: 230;
    TUSCOLA: 231;
    UNITED_KEETOWAH_BAND_OF_CHEROKEE: 232;
    WESTERN_CHEROKEE: 233;
    NORTHERN_CHEYENNE: 234;
    SOUTHERN_CHEYENNE: 235;
    EASTERN_CHICKAHOMINY: 236;
    WESTERN_CHICKAHOMINY: 237;
    CLATSOP: 238;
    COLUMBIA_RIVER_CHINOOK: 239;
    KATHLAMET: 240;
    UPPER_CHINOOK: 241;
    WAKIAKUM_CHINOOK: 242;
    WILLAPA_CHINOOK: 243;
    WISHRAM: 244;
    BAD_RIVER: 245;
    BAY_MILLS_CHIPPEWA: 246;
    BOIS_FORTE: 247;
    BURT_LAKE_CHIPPEWA: 248;
    FOND_DU_LAC: 249;
    GRAND_PORTAGE: 250;
    GRAND_TRAVERSE_BAND_OF_OTTAWA_CHIPPEWA: 251;
    KEWEENAW: 252;
    LAC_COURTE_OREILLES: 253;
    LAC_DU_FLAMBEAU: 254;
    LAC_VIEUX_DESERT_CHIPPEWA: 255;
    LAKE_SUPERIOR: 256;
    LEECH_LAKE: 257;
    LITTLE_SHELL_CHIPPEWA: 258;
    MILLE_LACS: 259;
    MINNESOTA_CHIPPEWA: 260;
    ONTONAGON: 261;
    RED_CLIFF_CHIPPEWA: 262;
    RED_LAKE_CHIPPEWA: 263;
    SAGINAW_CHIPPEWA: 264;
    ST_CROIX_CHIPPEWA: 265;
    SAULT_STE_MARIE_CHIPPEWA: 266;
    SOKOAGON_CHIPPEWA: 267;
    TURTLE_MOUNTAIN: 268;
    WHITE_EARTH: 269;
    ROCKY_BOYS_CHIPPEWA_CREE: 270;
    CLIFTON_CHOCTAW: 271;
    JENA_CHOCTAW: 272;
    MISSISSIPPI_CHOCTAW: 273;
    MOWA_BAND_OF_CHOCTAW: 274;
    OKLAHOMA_CHOCTAW: 275;
    SANTA_YNEZ: 276;
    OKLAHOMA_COMANCHE: 277;
    ALABAMA_COUSHATTA: 278;
    ALABAMA_CREEK: 279;
    ALABAMA_QUASSARTE: 280;
    EASTERN_CREEK: 281;
    EASTERN_MUSCOGEE: 282;
    KIALEGEE: 283;
    LOWER_MUSCOGEE: 284;
    MACHIS_LOWER_CREEK_INDIAN: 285;
    POARCH_BAND: 286;
    PRINCIPAL_CREEK_INDIAN_NATION: 287;
    STAR_CLAN_OF_MUSCOGEE_CREEKS: 288;
    THLOPTHLOCCO: 289;
    TUCKABACHEE: 290;
    AGUA_CALIENTE: 291;
    EASTERN_DELAWARE: 292;
    LENNI_LENAPE: 293;
    MUNSEE: 294;
    OKLAHOMA_DELAWARE: 295;
    RAMPOUGH_MOUNTAIN: 296;
    SAND_HILL: 297;
    CAMPO: 298;
    CAPITAN_GRANDE: 299;
    CUYAPAIPE: 300;
    LA_POSTA: 301;
    MANZANITA: 302;
    MESA_GRANDE: 303;
    SAN_PASQUAL: 304;
    SANTA_YSABEL: 305;
    SYCUAN: 306;
    ATTACAPA: 307;
    BILOXI: 308;
    GEORGETOWN_EASTERN_TRIBES: 309;
    MOOR: 310;
    NANSEMOND: 311;
    NATCHEZ: 312;
    NAUSU_WAIWASH: 313;
    NIPMUC: 314;
    PAUGUSSETT: 315;
    POCOMOKE_ACOHONOCK: 316;
    SOUTHEASTERN_INDIANS: 317;
    SUSQUEHANOCK: 318;
    TUNICA_BILOXI: 319;
    WACCAMAW_SIOUSAN: 320;
    WICOMICO: 321;
    ATSINA: 322;
    TRINITY: 323;
    WHILKUT: 324;
    IOWA_OF_KANSAS_NEBRASKA: 325;
    IOWA_OF_OKLAHOMA: 326;
    CAYUGA: 327;
    MOHAWK: 328;
    ONEIDA: 329;
    ONONDAGA: 330;
    SENECA: 331;
    SENECA_NATION: 332;
    SENECA_CAYUGA: 333;
    TONAWANDA_SENECA: 334;
    TUSCARORA: 335;
    WYANDOTTE: 336;
    OKLAHOMA_KICKAPOO: 337;
    TEXAS_KICKAPOO: 338;
    OKLAHOMA_KIOWA: 339;
    JAMESTOWN: 340;
    LOWER_ELWHA: 341;
    PORT_GAMBLE_KLALLAM: 342;
    MATINECOCK: 343;
    MONTAUK: 344;
    POOSPATUCK: 345;
    SETAUKET: 346;
    LA_JOLLA: 347;
    PALA: 348;
    PAUMA: 349;
    PECHANGA: 350;
    SOBOBA: 351;
    TWENTY_NINE_PALMS: 352;
    TEMECULA: 353;
    MOUNTAIN_MAIDU: 354;
    NISHINAM: 355;
    ILLINOIS_MIAMI: 356;
    INDIANA_MIAMI: 357;
    OKLAHOMA_MIAMI: 358;
    AROOSTOOK: 359;
    ALAMO_NAVAJO: 360;
    CANONCITO_NAVAJO: 361;
    RAMAH_NAVAJO: 362;
    ALSEA: 363;
    CELILO: 364;
    COLUMBIA: 365;
    KALAPUYA: 366;
    MOLALA: 367;
    TALAKAMISH: 368;
    TENINO: 369;
    TILLAMOOK: 370;
    WENATCHEE: 371;
    YAHOOSKIN: 372;
    BURT_LAKE_OTTAWA: 373;
    MICHIGAN_OTTAWA: 374;
    OKLAHOMA_OTTAWA: 375;
    BISHOP: 376;
    BRIDGEPORT: 377;
    BURNS_PAIUTE: 378;
    CEDARVILLE: 379;
    FORT_BIDWELL: 380;
    FORT_INDEPENDENCE: 381;
    KAIBAB: 382;
    LAS_VEGAS: 383;
    LONE_PINE: 384;
    LOVELOCK: 385;
    MALHEUR_PAIUTE: 386;
    MOAPA: 387;
    NORTHERN_PAIUTE: 388;
    OWENS_VALLEY: 389;
    PYRAMID_LAKE: 390;
    SAN_JUAN_SOUTHERN_PAIUTE: 391;
    SOUTHERN_PAIUTE: 392;
    SUMMIT_LAKE: 393;
    UTU_UTU_GWAITU_PAIUTE: 394;
    WALKER_RIVER: 395;
    YERINGTON_PAIUTE: 396;
    INDIAN_TOWNSHIP: 397;
    PLEASANT_POINT_PASSAMAQUODDY: 398;
    OKLAHOMA_PAWNEE: 399;
    OKLAHOMA_PEORIA: 400;
    MARSHANTUCKET_PEQUOT: 401;
    GILA_RIVER_PIMA_MARICOPA: 402;
    SALT_RIVER_PIMA_MARICOPA: 403;
    CENTRAL_POMO: 404;
    DRY_CREEK: 405;
    EASTERN_POMO: 406;
    KASHIA: 407;
    NORTHERN_POMO: 408;
    SCOTTS_VALLEY: 409;
    STONYFORD: 410;
    SULPHUR_BANK: 411;
    NEBRASKA_PONCA: 412;
    OKLAHOMA_PONCA: 413;
    CITIZEN_BAND_POTAWATOMI: 414;
    FOREST_COUNTY: 415;
    HANNAHVILLE: 416;
    HURON_POTAWATOMI: 417;
    POKAGON_POTAWATOMI: 418;
    PRAIRIE_BAND: 419;
    WISCONSIN_POTAWATOMI: 420;
    ACOMA: 421;
    ARIZONA_TEWA: 422;
    COCHITI: 423;
    HOPI: 424;
    ISLETA: 425;
    JEMEZ: 426;
    KERES: 427;
    LAGUNA: 428;
    NAMBE: 429;
    PICURIS: 430;
    PIRO: 431;
    POJOAQUE: 432;
    SAN_FELIPE: 433;
    SAN_ILDEFONSO: 434;
    SAN_JUAN_PUEBLO: 435;
    SAN_JUAN_DE: 436;
    SAN_JUAN: 437;
    SANDIA: 438;
    SANTA_ANA: 439;
    SANTA_CLARA: 440;
    SANTO_DOMINGO: 441;
    TAOS: 442;
    TESUQUE: 443;
    TEWA: 444;
    TIGUA: 445;
    ZIA: 446;
    ZUNI: 447;
    DUWAMISH: 448;
    KIKIALLUS: 449;
    LOWER_SKAGIT: 450;
    MUCKLESHOOT: 451;
    NISQUALLY: 452;
    NOOKSACK: 453;
    PORT_MADISON: 454;
    PUYALLUP: 455;
    SAMISH: 456;
    SAUK_SUIATTLE: 457;
    SKOKOMISH: 458;
    SKYKOMISH: 459;
    SNOHOMISH: 460;
    SNOQUALMIE: 461;
    SQUAXIN_ISLAND: 462;
    STEILACOOM: 463;
    STILLAGUAMISH: 464;
    SUQUAMISH: 465;
    SWINOMISH: 466;
    TULALIP: 467;
    UPPER_SKAGIT: 468;
    IOWA_SAC_AND_FOX: 469;
    MISSOURI_SAC_AND_FOX: 470;
    OKLAHOMA_SAC_AND_FOX: 471;
    BIG_CYPRESS: 472;
    BRIGHTON: 473;
    FLORIDA_SEMINOLE: 474;
    HOLLYWOOD_SEMINOLE: 475;
    OKLAHOMA_SEMINOLE: 476;
    SAN_MANUAL: 477;
    ABSENTEE_SHAWNEE: 478;
    EASTERN_SHAWNEE: 479;
    BATTLE_MOUNTAIN: 480;
    DUCKWATER: 481;
    ELKO: 482;
    ELY: 483;
    GOSHUTE: 484;
    PANAMINT: 485;
    RUBY_VALLEY: 486;
    SKULL_VALLEY: 487;
    SOUTH_FORK_SHOSHONE: 488;
    TE_MOAK_WESTERN_SHOSHONE: 489;
    TIMBI_SHA_SHOSHONE: 490;
    WASHAKIE: 491;
    WIND_RIVER_SHOSHONE: 492;
    YOMBA: 493;
    DUCK_VALLEY: 494;
    FALLON: 495;
    FORT_MC_DERMITT: 496;
    BLACKFOOT_SIOUX: 497;
    BRULE_SIOUX: 498;
    CHEYENNE_RIVER_SIOUX: 499;
    CROW_CREEK_SIOUX: 500;
    DAKOTA_SIOUX: 501;
    FLANDREAU_SANTEE: 502;
    FORT_PECK: 503;
    LAKE_TRAVERSE_SIOUX: 504;
    LOWER_BRULE_SIOUX: 505;
    LOWER_SIOUX: 506;
    MDEWAKANTON_SIOUX: 507;
    MINICONJOU: 508;
    OGLALA_SIOUX: 509;
    PINE_RIDGE_SIOUX: 510;
    PIPESTONE_SIOUX: 511;
    PRAIRIE_ISLAND_SIOUX: 512;
    PRIOR_LAKE_SIOUX: 513;
    ROSEBUD_SIOUX: 514;
    SANS_ARC_SIOUX: 515;
    SANTEE_SIOUX: 516;
    SISSETON_WAHPETON: 517;
    SISSETON_SIOUX: 518;
    SPIRIT_LAKE_SIOUX: 519;
    STANDING_ROCK_SIOUX: 520;
    TETON_SIOUX: 521;
    TWO_KETTLE_SIOUX: 522;
    UPPER_SIOUX: 523;
    WAHPEKUTE_SIOUX: 524;
    WAHPETON_SIOUX: 525;
    WAZHAZA_SIOUX: 526;
    YANKTON_SIOUX: 527;
    YANKTONAI_SIOUX: 528;
    AK_CHIN: 529;
    GILA_BEND: 530;
    SAN_XAVIER: 531;
    SELLS: 532;
    COW_CREEK_UMPQUA: 533;
    ALLEN_CANYON: 534;
    UINTAH_UTE: 535;
    UTE_MOUNTAIN_UTE: 536;
    GAY_HEAD_WAMPANOAG: 537;
    MASHPEE_WAMPANOAG: 538;
    ALPINE: 539;
    CARSON: 540;
    DRESSLERVILLE: 541;
    HO_CHUNK: 542;
    NEBRASKA_WINNEBAGO: 543;
    TABLE_BLUFF: 544;
    BARRIO_LIBRE: 545;
    PASCUA_YAQUI: 546;
    CHUKCHANSI: 547;
    TACHI: 548;
    TULE_RIVER: 549;
    COCOPAH: 550;
    HAVASUPAI: 551;
    HUALAPAI: 552;
    MARICOPA: 553;
    MOHAVE: 554;
    QUECHAN: 555;
    YAVAPAI: 556;
    COAST_YUROK: 557;
    ALASKA_INDIAN: 558;
    ESKIMO: 559;
    ALEUT: 560;
    ALASKAN_ATHABASCAN: 561;
    SOUTHEAST_ALASKA: 562;
    AHTNA: 563;
    ALATNA: 564;
    ALEXANDER: 565;
    ALLAKAKET: 566;
    ALANVIK: 567;
    ANVIK: 568;
    ARCTIC: 569;
    BEAVER: 570;
    BIRCH_CREEK: 571;
    CANTWELL: 572;
    CHALKYITSIK: 573;
    CHICKALOON: 574;
    CHISTOCHINA: 575;
    CHITINA: 576;
    CIRCLE: 577;
    COOK_INLET: 578;
    COPPER_CENTER: 579;
    COPPER_RIVER: 580;
    DOT_LAKE: 581;
    DOYON: 582;
    EAGLE: 583;
    EKLUTNA: 584;
    EVANSVILLE: 585;
    FORT_YUKON: 586;
    GAKONA: 587;
    GALENA: 588;
    GRAYLING: 589;
    GULKANA: 590;
    HEALY_LAKE: 591;
    HOLY_CROSS: 592;
    HUGHES: 593;
    HUSLIA: 594;
    ILIAMNA: 595;
    KALTAG: 596;
    KLUTI_KAAH: 597;
    KNIK: 598;
    KOYUKUK: 599;
    LAKE_MINCHUMINA: 600;
    LIME: 601;
    MCGRATH: 602;
    MANLEY_HOT_SPRINGS: 603;
    MENTASTA_LAKE: 604;
    MINTO: 605;
    NENANA: 606;
    NIKOLAI: 607;
    NINILCHIK: 608;
    NONDALTON: 609;
    NORTHWAY: 610;
    NULATO: 611;
    PEDRO_BAY: 612;
    RAMPART: 613;
    RUBY: 614;
    SALAMATOF: 615;
    SELDOVIA: 616;
    SLANA: 617;
    SHAGELUK: 618;
    STEVENS: 619;
    STONY_RIVER: 620;
    TAKOTNA: 621;
    TANACROSS: 622;
    TANAINA: 623;
    TANANA: 624;
    TANANA_CHIEFS: 625;
    TAZLINA: 626;
    TELIDA: 627;
    TETLIN: 628;
    TOK: 629;
    TYONEK: 630;
    VENETIE: 631;
    WISEMAN: 632;
    TLINGIT_HAIDA: 633;
    TSIMSHIAN: 634;
    ANGOON: 635;
    CENTRAL_COUNCIL_OF_TLINGIT_AND_HAIDA_TRIBES: 636;
    CHILKAT: 637;
    CHILKOOT: 638;
    CRAIG: 639;
    DOUGLAS: 640;
    HAIDA: 641;
    HOONAH: 642;
    HYDABURG: 643;
    KAKE: 644;
    KASAAN: 645;
    KENAITZE: 646;
    KETCHIKAN: 647;
    KLAWOCK: 648;
    PELICAN: 649;
    PETERSBURG: 650;
    SAXMAN: 651;
    SITKA: 652;
    TENAKEE_SPRINGS: 653;
    TLINGIT: 654;
    WRANGELL: 655;
    YAKUTAT: 656;
    METLAKATLA: 657;
    GREENLAND_ESKIMO: 658;
    INUPIAT_ESKIMO: 659;
    SIBERIAN_ESKIMO: 660;
    YUPIK_ESKIMO: 661;
    AMBLER: 662;
    ANAKTUVUK: 663;
    ANAKTUVUK_PASS: 664;
    ARCTIC_SLOPE_INUPIAT: 665;
    ARCTIC_SLOPE_CORPORATION: 666;
    ATQASUK: 667;
    BARROW: 668;
    BERING_STRAITS_INUPIAT: 669;
    BREVIG_MISSION: 670;
    BUCKLAND: 671;
    CHINIK: 672;
    COUNCIL: 673;
    DEERING: 674;
    ELIM: 675;
    GOLOVIN: 676;
    INALIK_DIOMEDE: 677;
    INUPIAQ: 678;
    KAKTOVIK: 679;
    KAWERAK: 680;
    KIANA: 681;
    KIVALINA: 682;
    KOBUK: 683;
    KOTZEBUE: 684;
    KOYUK: 685;
    KWIGUK: 686;
    MAUNELUK_INUPIAT: 687;
    NANA_INUPIAT: 688;
    NOATAK: 689;
    NOME: 690;
    NOORVIK: 691;
    NUIQSUT: 692;
    POINT_HOPE: 693;
    POINT_LAY: 694;
    SELAWIK: 695;
    SHAKTOOLIK: 696;
    SHISHMAREF: 697;
    SHUNGNAK: 698;
    SOLOMON: 699;
    TELLER: 700;
    UNALAKLEET: 701;
    WAINWRIGHT: 702;
    WALES: 703;
    WHITE_MOUNTAIN: 704;
    WHITE_MOUNTAIN_INUPIAT: 705;
    MARYS_IGLOO: 706;
    GAMBELL: 707;
    SAVOONGA: 708;
    SIBERIAN_YUPIK: 709;
    AKIACHAK: 710;
    AKIAK: 711;
    ALAKANUK: 712;
    ALEKNAGIK: 713;
    ANDREAFSKY: 714;
    ANIAK: 715;
    ATMAUTLUAK: 716;
    BETHEL: 717;
    BILL_MOORES_SLOUGH: 718;
    BRISTOL_BAY_YUPIK: 719;
    CALISTA_YUPIK: 720;
    CHEFORNAK: 721;
    CHEVAK: 722;
    CHUATHBALUK: 723;
    CLARKS_POINT: 724;
    CROOKED_CREEK: 725;
    DILLINGHAM: 726;
    EEK: 727;
    EKUK: 728;
    EKWOK: 729;
    EMMONAK: 730;
    GOODNEWS_BAY: 731;
    HOOPER_BAY: 732;
    IQURMUIT_RUSSIAN_MISSION: 733;
    KALSKAG: 734;
    KASIGLUK: 735;
    KIPNUK: 736;
    KOLIGANEK: 737;
    KONGIGANAK: 738;
    KOTLIK: 739;
    KWETHLUK: 740;
    KWIGILLINGOK: 741;
    LEVELOCK: 742;
    LOWER_KALSKAG: 743;
    MANOKOTAK: 744;
    MARSHALL: 745;
    MEKORYUK: 746;
    MOUNTAIN_VILLAGE: 747;
    NAKNEK: 748;
    NAPAUMUTE: 749;
    NAPAKIAK: 750;
    NAPASKIAK: 751;
    NEWHALEN: 752;
    NEW_STUYAHOK: 753;
    NEWTOK: 754;
    NIGHTMUTE: 755;
    NUNAPITCHUKV: 756;
    OSCARVILLE: 757;
    PILOT_STATION: 758;
    PITKAS_POINT: 759;
    PLATINUM: 760;
    PORTAGE_CREEK: 761;
    QUINHAGAK: 762;
    RED_DEVIL: 763;
    ST_MICHAEL: 764;
    SCAMMON_BAY: 765;
    SHELDONS_POINT: 766;
    SLEETMUTE: 767;
    STEBBINS: 768;
    TOGIAK: 769;
    TOKSOOK: 770;
    TULUKSKAK: 771;
    TUNTUTULIAK: 772;
    TUNUNAK: 773;
    TWIN_HILLS: 774;
    GEORGETOWN_YUPIK_ESKIMO: 775;
    ST_MARYS: 776;
    UMKUMIATE: 777;
    ALUTIIQ_ALEUT: 778;
    BRISTOL_BAY_ALEUT: 779;
    CHUGACH_ALEUT: 780;
    EYAK: 781;
    KONIAG_ALEUT: 782;
    SUGPIAQ: 783;
    SUQPIGAQ: 784;
    UNANGAN_ALEUT: 785;
    TATITLEK: 786;
    UGASHIK: 787;
    CHIGNIK: 788;
    CHIGNIK_LAKE: 789;
    EGEGIK: 790;
    IGIUGIG: 791;
    IVANOF_BAY: 792;
    KING_SALMON: 793;
    KOKHANOK: 794;
    PERRYVILLE: 795;
    PILOT_POINT: 796;
    PORT_HEIDEN: 797;
    CHENEGA: 798;
    CHUGACH_CORPORATION: 799;
    ENGLISH_BAY: 800;
    PORT_GRAHAM: 801;
    AKHIOK: 802;
    AGDAAGUX: 803;
    KARLUK: 804;
    KODIAK: 805;
    LARSEN_BAY: 806;
    OLD_HARBOR: 807;
    OUZINKIE: 808;
    PORT_LIONS: 809;
    AKUTAN: 810;
    ALEUT_CORPORATION: 811;
    ALEUTIAN: 812;
    ALEUTIAN_ISLANDER: 813;
    ATKA: 814;
    BELKOFSKI: 815;
    CHIGNIK_LAGOON: 816;
    KING_COVE: 817;
    FALSE_PASS: 818;
    NELSON_LAGOON: 819;
    NIKOLSKI: 820;
    PAULOFF_HARBOR: 821;
    QAGAN_TOYAGUNGIN: 822;
    QAWALANGIN: 823;
    ST_GEORGE: 824;
    ST_PAUL: 825;
    SAND_POINT: 826;
    SOUTH_NAKNEK: 827;
    UNALASKA: 828;
    UNGA: 829;
    ASIAN: 830;
    ASIAN_INDIAN: 831;
    BANGLADESHI: 832;
    BHUTANESE: 833;
    BURMESE: 834;
    CAMBODIAN: 835;
    CHINESE: 836;
    TAIWANESE: 837;
    FILIPINO: 838;
    HMONG: 839;
    INDONESIAN: 840;
    JAPANESE: 841;
    KOREAN: 842;
    LAOTIAN: 843;
    MALAYSIAN: 844;
    OKINAWAN: 845;
    PAKISTANI: 846;
    SRI_LANKAN: 847;
    THAI: 848;
    VIETNAMESE: 849;
    IWO_JIMAN: 850;
    MALDIVIAN: 851;
    NEPALESE: 852;
    SINGAPOREAN: 853;
    MADAGASCAR: 854;
    BLACK_OR_AFRICAN_AMERICAN: 855;
    BLACK: 856;
    AFRICAN_AMERICAN: 857;
    AFRICAN: 858;
    BAHAMIAN: 859;
    BARBADIAN: 860;
    DOMINICAN_2069_3: 861;
    DOMINICA_ISLANDER: 862;
    HAITIAN: 863;
    JAMAICAN: 864;
    TOBAGOAN: 865;
    TRINIDADIAN: 866;
    WEST_INDIAN: 867;
    BOTSWANAN: 868;
    ETHIOPIAN: 869;
    LIBERIAN: 870;
    NAMIBIAN: 871;
    NIGERIAN: 872;
    ZAIREAN: 873;
    NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER: 874;
    POLYNESIAN: 875;
    MICRONESIAN: 876;
    MELANESIAN: 877;
    OTHER_PACIFIC_ISLANDER: 878;
    NATIVE_HAWAIIAN: 879;
    SAMOAN: 880;
    TAHITIAN: 881;
    TONGAN: 882;
    TOKELAUAN: 883;
    GUAMANIAN_OR_CHAMORRO: 884;
    GUAMANIAN: 885;
    CHAMORRO: 886;
    MARIANA_ISLANDER: 887;
    MARSHALLESE: 888;
    PALAUAN: 889;
    CAROLINIAN: 890;
    KOSRAEAN: 891;
    POHNPEIAN: 892;
    SAIPANESE: 893;
    KIRIBATI: 894;
    CHUUKESE: 895;
    YAPESE: 896;
    FIJIAN: 897;
    PAPUA_NEW_GUINEAN: 898;
    SOLOMON_ISLANDER: 899;
    NEW_HEBRIDES: 900;
    WHITE: 901;
    EUROPEAN: 902;
    MIDDLE_EASTERN_OR_NORTH_AFRICAN: 903;
    ARAB: 904;
    ARMENIAN: 905;
    ENGLISH: 906;
    FRENCH: 907;
    GERMAN: 908;
    IRISH: 909;
    ITALIAN: 910;
    POLISH: 911;
    SCOTTISH: 912;
    ASSYRIAN: 913;
    EGYPTIAN: 914;
    IRANIAN: 915;
    IRAQI: 916;
    LEBANESE: 917;
    PALESTINIAN: 918;
    SYRIAN: 919;
    AFGHANISTANI: 920;
    ISRAEILI: 921;
    OTHER_RACE: 922;
    ETHNICITY: 923;
    HISPANIC_OR_LATINO: 924;
    SPANIARD: 925;
    MEXICAN: 926;
    CENTRAL_AMERICAN: 927;
    SOUTH_AMERICAN: 928;
    LATIN_AMERICAN: 929;
    PUERTO_RICAN: 930;
    CUBAN: 931;
    DOMINICAN_2184_0: 932;
    ANDALUSIAN: 933;
    ASTURIAN: 934;
    CASTILLIAN: 935;
    CATALONIAN: 936;
    BELEARIC_ISLANDER: 937;
    GALLEGO: 938;
    VALENCIAN: 939;
    CANARIAN: 940;
    SPANISH_BASQUE: 941;
    MEXICAN_AMERICAN: 942;
    MEXICANO: 943;
    CHICANO: 944;
    LA_RAZA: 945;
    MEXICAN_AMERICAN_INDIAN_2153_5: 946;
    COSTA_RICAN: 947;
    GUATEMALAN: 948;
    HONDURAN: 949;
    NICARAGUAN: 950;
    PANAMANIAN: 951;
    SALVADORAN: 952;
    CENTRAL_AMERICAN_INDIAN_2162_6: 953;
    CANAL_ZONE: 954;
    ARGENTINEAN: 955;
    BOLIVIAN: 956;
    CHILEAN: 957;
    COLOMBIAN: 958;
    ECUADORIAN: 959;
    PARAGUAYAN: 960;
    PERUVIAN: 961;
    URUGUAYAN: 962;
    VENEZUELAN: 963;
    SOUTH_AMERICAN_INDIAN_2175_8: 964;
    CRIOLLO: 965;
    NOT_HISPANIC_OR_LATINO: 966;
  }

  export const Value: ValueMap;
}

export class USCoreCarePlanCategoryExtensionCode extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreCarePlanCategoryExtensionCode.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreCarePlanCategoryExtensionCode): USCoreCarePlanCategoryExtensionCode.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreCarePlanCategoryExtensionCode, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreCarePlanCategoryExtensionCode;
  static deserializeBinaryFromReader(message: USCoreCarePlanCategoryExtensionCode, reader: jspb.BinaryReader): USCoreCarePlanCategoryExtensionCode;
}

export namespace USCoreCarePlanCategoryExtensionCode {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    ASSESS_PLAN: 1;
  }

  export const Value: ValueMap;
}

export class USCoreConditionCategoryExtensionCode extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreConditionCategoryExtensionCode.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreConditionCategoryExtensionCode): USCoreConditionCategoryExtensionCode.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreConditionCategoryExtensionCode, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreConditionCategoryExtensionCode;
  static deserializeBinaryFromReader(message: USCoreConditionCategoryExtensionCode, reader: jspb.BinaryReader): USCoreConditionCategoryExtensionCode;
}

export namespace USCoreConditionCategoryExtensionCode {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    PROBLEM: 1;
    HEALTH_CONCERN: 2;
  }

  export const Value: ValueMap;
}

export class USCoreDocumentReferencesCategoryCode extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreDocumentReferencesCategoryCode.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreDocumentReferencesCategoryCode): USCoreDocumentReferencesCategoryCode.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreDocumentReferencesCategoryCode, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreDocumentReferencesCategoryCode;
  static deserializeBinaryFromReader(message: USCoreDocumentReferencesCategoryCode, reader: jspb.BinaryReader): USCoreDocumentReferencesCategoryCode;
}

export namespace USCoreDocumentReferencesCategoryCode {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    CLINICAL_NOTE: 1;
  }

  export const Value: ValueMap;
}

export class USCoreProvenancePaticipantTypeExtensionCode extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreProvenancePaticipantTypeExtensionCode.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreProvenancePaticipantTypeExtensionCode): USCoreProvenancePaticipantTypeExtensionCode.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreProvenancePaticipantTypeExtensionCode, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreProvenancePaticipantTypeExtensionCode;
  static deserializeBinaryFromReader(message: USCoreProvenancePaticipantTypeExtensionCode, reader: jspb.BinaryReader): USCoreProvenancePaticipantTypeExtensionCode;
}

export namespace USCoreProvenancePaticipantTypeExtensionCode {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    TRANSMITTER: 1;
  }

  export const Value: ValueMap;
}

export class BirthSexValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BirthSexValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: BirthSexValueSet): BirthSexValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BirthSexValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BirthSexValueSet;
  static deserializeBinaryFromReader(message: BirthSexValueSet, reader: jspb.BinaryReader): BirthSexValueSet;
}

export namespace BirthSexValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    F: 1;
    M: 2;
    UNK: 3;
  }

  export const Value: ValueMap;
}

export class DetailedEthnicityValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DetailedEthnicityValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: DetailedEthnicityValueSet): DetailedEthnicityValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DetailedEthnicityValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DetailedEthnicityValueSet;
  static deserializeBinaryFromReader(message: DetailedEthnicityValueSet, reader: jspb.BinaryReader): DetailedEthnicityValueSet;
}

export namespace DetailedEthnicityValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    ETHNICITY: 1;
    SPANIARD: 2;
    MEXICAN: 3;
    CENTRAL_AMERICAN: 4;
    SOUTH_AMERICAN: 5;
    LATIN_AMERICAN: 6;
    PUERTO_RICAN: 7;
    CUBAN: 8;
    DOMINICAN: 9;
    ANDALUSIAN: 10;
    ASTURIAN: 11;
    CASTILLIAN: 12;
    CATALONIAN: 13;
    BELEARIC_ISLANDER: 14;
    GALLEGO: 15;
    VALENCIAN: 16;
    CANARIAN: 17;
    SPANISH_BASQUE: 18;
    MEXICAN_AMERICAN: 19;
    MEXICANO: 20;
    CHICANO: 21;
    LA_RAZA: 22;
    MEXICAN_AMERICAN_INDIAN: 23;
    COSTA_RICAN: 24;
    GUATEMALAN: 25;
    HONDURAN: 26;
    NICARAGUAN: 27;
    PANAMANIAN: 28;
    SALVADORAN: 29;
    CENTRAL_AMERICAN_INDIAN: 30;
    CANAL_ZONE: 31;
    ARGENTINEAN: 32;
    BOLIVIAN: 33;
    CHILEAN: 34;
    COLOMBIAN: 35;
    ECUADORIAN: 36;
    PARAGUAYAN: 37;
    PERUVIAN: 38;
    URUGUAYAN: 39;
    VENEZUELAN: 40;
    SOUTH_AMERICAN_INDIAN: 41;
    CRIOLLO: 42;
  }

  export const Value: ValueMap;
}

export class DetailedRaceValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DetailedRaceValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: DetailedRaceValueSet): DetailedRaceValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DetailedRaceValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DetailedRaceValueSet;
  static deserializeBinaryFromReader(message: DetailedRaceValueSet, reader: jspb.BinaryReader): DetailedRaceValueSet;
}

export namespace DetailedRaceValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    RACE: 1;
    AMERICAN_INDIAN: 2;
    ALASKA_NATIVE: 3;
    ABENAKI: 4;
    ALGONQUIAN: 5;
    APACHE: 6;
    ARAPAHO: 7;
    ARIKARA: 8;
    ASSINIBOINE: 9;
    ASSINIBOINE_SIOUX: 10;
    BANNOCK: 11;
    BLACKFEET: 12;
    BROTHERTON: 13;
    BURT_LAKE_BAND: 14;
    CADDO: 15;
    CAHUILLA: 16;
    CALIFORNIA_TRIBES: 17;
    CANADIAN_AND_LATIN_AMERICAN_INDIAN: 18;
    CATAWBA: 19;
    CAYUSE: 20;
    CHEHALIS: 21;
    CHEMAKUAN: 22;
    CHEMEHUEVI: 23;
    CHEROKEE: 24;
    CHEROKEE_SHAWNEE: 25;
    CHEYENNE: 26;
    CHEYENNE_ARAPAHO: 27;
    CHICKAHOMINY: 28;
    CHICKASAW: 29;
    CHINOOK: 30;
    CHIPPEWA: 31;
    CHIPPEWA_CREE: 32;
    CHITIMACHA: 33;
    CHOCTAW: 34;
    CHUMASH: 35;
    CLEAR_LAKE: 36;
    COEUR_D_ALENE: 37;
    COHARIE: 38;
    COLORADO_RIVER: 39;
    COLVILLE: 40;
    COMANCHE: 41;
    COOS_LOWER_UMPQUA_SIUSLAW: 42;
    COOS: 43;
    COQUILLES: 44;
    COSTANOAN: 45;
    COUSHATTA: 46;
    COWLITZ: 47;
    CREE: 48;
    CREEK: 49;
    CROATAN: 50;
    CROW: 51;
    CUPENO: 52;
    DELAWARE: 53;
    DIEGUENO: 54;
    EASTERN_TRIBES: 55;
    ESSELEN: 56;
    FORT_BELKNAP: 57;
    FORT_BERTHOLD: 58;
    FORT_MCDOWELL: 59;
    FORT_HALL: 60;
    GABRIELENO: 61;
    GRAND_RONDE: 62;
    GROS_VENTRES: 63;
    HALIWA: 64;
    HIDATSA: 65;
    HOOPA: 66;
    HOOPA_EXTENSION: 67;
    HOUMA: 68;
    INAJA_COSMIT: 69;
    IOWA: 70;
    IROQUOIS: 71;
    JUANENO: 72;
    KALISPEL: 73;
    KARUK: 74;
    KAW: 75;
    KICKAPOO: 76;
    KIOWA: 77;
    KLALLAM: 78;
    KLAMATH: 79;
    KONKOW: 80;
    KOOTENAI: 81;
    LASSIK: 82;
    LONG_ISLAND: 83;
    LUISENO: 84;
    LUMBEE: 85;
    LUMMI: 86;
    MAIDU: 87;
    MAKAH: 88;
    MALISEET: 89;
    MANDAN: 90;
    MATTAPONI: 91;
    MENOMINEE: 92;
    MIAMI: 93;
    MICCOSUKEE: 94;
    MICMAC: 95;
    MISSION_INDIANS: 96;
    MIWOK: 97;
    MODOC: 98;
    MOHEGAN: 99;
    MONO: 100;
    NANTICOKE: 101;
    NARRAGANSETT: 102;
    NAVAJO: 103;
    NEZ_PERCE: 104;
    NOMALAKI: 105;
    NORTHWEST_TRIBES: 106;
    OMAHA: 107;
    OREGON_ATHABASKAN: 108;
    OSAGE: 109;
    OTOE_MISSOURIA: 110;
    OTTAWA: 111;
    PAIUTE: 112;
    PAMUNKEY: 113;
    PASSAMAQUODDY: 114;
    PAWNEE: 115;
    PENOBSCOT: 116;
    PEORIA: 117;
    PEQUOT: 118;
    PIMA: 119;
    PISCATAWAY: 120;
    PIT_RIVER: 121;
    POMO: 122;
    PONCA: 123;
    POTAWATOMI: 124;
    POWHATAN: 125;
    PUEBLO: 126;
    PUGET_SOUND_SALISH: 127;
    QUAPAW: 128;
    QUINAULT: 129;
    RAPPAHANNOCK: 130;
    RENO_SPARKS: 131;
    ROUND_VALLEY: 132;
    SAC_AND_FOX: 133;
    SALINAN: 134;
    SALISH: 135;
    SALISH_AND_KOOTENAI: 136;
    SCHAGHTICOKE: 137;
    SCOTT_VALLEY: 138;
    SEMINOLE: 139;
    SERRANO: 140;
    SHASTA: 141;
    SHAWNEE: 142;
    SHINNECOCK: 143;
    SHOALWATER_BAY: 144;
    SHOSHONE: 145;
    SHOSHONE_PAIUTE: 146;
    SILETZ: 147;
    SIOUX: 148;
    SIUSLAW: 149;
    SPOKANE: 150;
    STEWART: 151;
    STOCKBRIDGE: 152;
    SUSANVILLE: 153;
    TOHONO_O_ODHAM: 154;
    TOLOWA: 155;
    TONKAWA: 156;
    TYGH: 157;
    UMATILLA: 158;
    UMPQUA: 159;
    UTE: 160;
    WAILAKI: 161;
    WALLA_WALLA: 162;
    WAMPANOAG: 163;
    WARM_SPRINGS: 164;
    WASCOPUM: 165;
    WASHOE: 166;
    WICHITA: 167;
    WIND_RIVER: 168;
    WINNEBAGO: 169;
    WINNEMUCCA: 170;
    WINTUN: 171;
    WIYOT: 172;
    YAKAMA: 173;
    YAKAMA_COWLITZ: 174;
    YAQUI: 175;
    YAVAPAI_APACHE: 176;
    YOKUTS: 177;
    YUCHI: 178;
    YUMAN: 179;
    YUROK: 180;
    CHIRICAHUA: 181;
    FORT_SILL_APACHE: 182;
    JICARILLA_APACHE: 183;
    LIPAN_APACHE: 184;
    MESCALERO_APACHE: 185;
    OKLAHOMA_APACHE: 186;
    PAYSON_APACHE: 187;
    SAN_CARLOS_APACHE: 188;
    WHITE_MOUNTAIN_APACHE: 189;
    NORTHERN_ARAPAHO: 190;
    SOUTHERN_ARAPAHO: 191;
    WIND_RIVER_ARAPAHO: 192;
    FORT_PECK_ASSINIBOINE_SIOUX: 193;
    OKLAHOMA_CADO: 194;
    AGUA_CALIENTE_CAHUILLA: 195;
    AUGUSTINE: 196;
    CABAZON: 197;
    LOS_COYOTES: 198;
    MORONGO: 199;
    SANTA_ROSA_CAHUILLA: 200;
    TORRES_MARTINEZ: 201;
    CAHTO: 202;
    CHIMARIKO: 203;
    COAST_MIWOK: 204;
    DIGGER: 205;
    KAWAIISU: 206;
    KERN_RIVER: 207;
    MATTOLE: 208;
    RED_WOOD: 209;
    SANTA_ROSA: 210;
    TAKELMA: 211;
    WAPPO: 212;
    YANA: 213;
    YUKI: 214;
    CANADIAN_INDIAN: 215;
    CENTRAL_AMERICAN_INDIAN: 216;
    FRENCH_AMERICAN_INDIAN: 217;
    MEXICAN_AMERICAN_INDIAN: 218;
    SOUTH_AMERICAN_INDIAN: 219;
    SPANISH_AMERICAN_INDIAN: 220;
    HOH: 221;
    QUILEUTE: 222;
    CHEROKEE_ALABAMA: 223;
    CHEROKEES_OF_NORTHEAST_ALABAMA: 224;
    CHEROKEES_OF_SOUTHEAST_ALABAMA: 225;
    EASTERN_CHEROKEE: 226;
    ECHOTA_CHEROKEE: 227;
    ETOWAH_CHEROKEE: 228;
    NORTHERN_CHEROKEE: 229;
    TUSCOLA: 230;
    UNITED_KEETOWAH_BAND_OF_CHEROKEE: 231;
    WESTERN_CHEROKEE: 232;
    NORTHERN_CHEYENNE: 233;
    SOUTHERN_CHEYENNE: 234;
    EASTERN_CHICKAHOMINY: 235;
    WESTERN_CHICKAHOMINY: 236;
    CLATSOP: 237;
    COLUMBIA_RIVER_CHINOOK: 238;
    KATHLAMET: 239;
    UPPER_CHINOOK: 240;
    WAKIAKUM_CHINOOK: 241;
    WILLAPA_CHINOOK: 242;
    WISHRAM: 243;
    BAD_RIVER: 244;
    BAY_MILLS_CHIPPEWA: 245;
    BOIS_FORTE: 246;
    BURT_LAKE_CHIPPEWA: 247;
    FOND_DU_LAC: 248;
    GRAND_PORTAGE: 249;
    GRAND_TRAVERSE_BAND_OF_OTTAWA_CHIPPEWA: 250;
    KEWEENAW: 251;
    LAC_COURTE_OREILLES: 252;
    LAC_DU_FLAMBEAU: 253;
    LAC_VIEUX_DESERT_CHIPPEWA: 254;
    LAKE_SUPERIOR: 255;
    LEECH_LAKE: 256;
    LITTLE_SHELL_CHIPPEWA: 257;
    MILLE_LACS: 258;
    MINNESOTA_CHIPPEWA: 259;
    ONTONAGON: 260;
    RED_CLIFF_CHIPPEWA: 261;
    RED_LAKE_CHIPPEWA: 262;
    SAGINAW_CHIPPEWA: 263;
    ST_CROIX_CHIPPEWA: 264;
    SAULT_STE_MARIE_CHIPPEWA: 265;
    SOKOAGON_CHIPPEWA: 266;
    TURTLE_MOUNTAIN: 267;
    WHITE_EARTH: 268;
    ROCKY_BOYS_CHIPPEWA_CREE: 269;
    CLIFTON_CHOCTAW: 270;
    JENA_CHOCTAW: 271;
    MISSISSIPPI_CHOCTAW: 272;
    MOWA_BAND_OF_CHOCTAW: 273;
    OKLAHOMA_CHOCTAW: 274;
    SANTA_YNEZ: 275;
    OKLAHOMA_COMANCHE: 276;
    ALABAMA_COUSHATTA: 277;
    ALABAMA_CREEK: 278;
    ALABAMA_QUASSARTE: 279;
    EASTERN_CREEK: 280;
    EASTERN_MUSCOGEE: 281;
    KIALEGEE: 282;
    LOWER_MUSCOGEE: 283;
    MACHIS_LOWER_CREEK_INDIAN: 284;
    POARCH_BAND: 285;
    PRINCIPAL_CREEK_INDIAN_NATION: 286;
    STAR_CLAN_OF_MUSCOGEE_CREEKS: 287;
    THLOPTHLOCCO: 288;
    TUCKABACHEE: 289;
    AGUA_CALIENTE: 290;
    EASTERN_DELAWARE: 291;
    LENNI_LENAPE: 292;
    MUNSEE: 293;
    OKLAHOMA_DELAWARE: 294;
    RAMPOUGH_MOUNTAIN: 295;
    SAND_HILL: 296;
    CAMPO: 297;
    CAPITAN_GRANDE: 298;
    CUYAPAIPE: 299;
    LA_POSTA: 300;
    MANZANITA: 301;
    MESA_GRANDE: 302;
    SAN_PASQUAL: 303;
    SANTA_YSABEL: 304;
    SYCUAN: 305;
    ATTACAPA: 306;
    BILOXI: 307;
    GEORGETOWN_EASTERN_TRIBES: 308;
    MOOR: 309;
    NANSEMOND: 310;
    NATCHEZ: 311;
    NAUSU_WAIWASH: 312;
    NIPMUC: 313;
    PAUGUSSETT: 314;
    POCOMOKE_ACOHONOCK: 315;
    SOUTHEASTERN_INDIANS: 316;
    SUSQUEHANOCK: 317;
    TUNICA_BILOXI: 318;
    WACCAMAW_SIOUSAN: 319;
    WICOMICO: 320;
    ATSINA: 321;
    TRINITY: 322;
    WHILKUT: 323;
    IOWA_OF_KANSAS_NEBRASKA: 324;
    IOWA_OF_OKLAHOMA: 325;
    CAYUGA: 326;
    MOHAWK: 327;
    ONEIDA: 328;
    ONONDAGA: 329;
    SENECA: 330;
    SENECA_NATION: 331;
    SENECA_CAYUGA: 332;
    TONAWANDA_SENECA: 333;
    TUSCARORA: 334;
    WYANDOTTE: 335;
    OKLAHOMA_KICKAPOO: 336;
    TEXAS_KICKAPOO: 337;
    OKLAHOMA_KIOWA: 338;
    JAMESTOWN: 339;
    LOWER_ELWHA: 340;
    PORT_GAMBLE_KLALLAM: 341;
    MATINECOCK: 342;
    MONTAUK: 343;
    POOSPATUCK: 344;
    SETAUKET: 345;
    LA_JOLLA: 346;
    PALA: 347;
    PAUMA: 348;
    PECHANGA: 349;
    SOBOBA: 350;
    TWENTY_NINE_PALMS: 351;
    TEMECULA: 352;
    MOUNTAIN_MAIDU: 353;
    NISHINAM: 354;
    ILLINOIS_MIAMI: 355;
    INDIANA_MIAMI: 356;
    OKLAHOMA_MIAMI: 357;
    AROOSTOOK: 358;
    ALAMO_NAVAJO: 359;
    CANONCITO_NAVAJO: 360;
    RAMAH_NAVAJO: 361;
    ALSEA: 362;
    CELILO: 363;
    COLUMBIA: 364;
    KALAPUYA: 365;
    MOLALA: 366;
    TALAKAMISH: 367;
    TENINO: 368;
    TILLAMOOK: 369;
    WENATCHEE: 370;
    YAHOOSKIN: 371;
    BURT_LAKE_OTTAWA: 372;
    MICHIGAN_OTTAWA: 373;
    OKLAHOMA_OTTAWA: 374;
    BISHOP: 375;
    BRIDGEPORT: 376;
    BURNS_PAIUTE: 377;
    CEDARVILLE: 378;
    FORT_BIDWELL: 379;
    FORT_INDEPENDENCE: 380;
    KAIBAB: 381;
    LAS_VEGAS: 382;
    LONE_PINE: 383;
    LOVELOCK: 384;
    MALHEUR_PAIUTE: 385;
    MOAPA: 386;
    NORTHERN_PAIUTE: 387;
    OWENS_VALLEY: 388;
    PYRAMID_LAKE: 389;
    SAN_JUAN_SOUTHERN_PAIUTE: 390;
    SOUTHERN_PAIUTE: 391;
    SUMMIT_LAKE: 392;
    UTU_UTU_GWAITU_PAIUTE: 393;
    WALKER_RIVER: 394;
    YERINGTON_PAIUTE: 395;
    INDIAN_TOWNSHIP: 396;
    PLEASANT_POINT_PASSAMAQUODDY: 397;
    OKLAHOMA_PAWNEE: 398;
    OKLAHOMA_PEORIA: 399;
    MARSHANTUCKET_PEQUOT: 400;
    GILA_RIVER_PIMA_MARICOPA: 401;
    SALT_RIVER_PIMA_MARICOPA: 402;
    CENTRAL_POMO: 403;
    DRY_CREEK: 404;
    EASTERN_POMO: 405;
    KASHIA: 406;
    NORTHERN_POMO: 407;
    SCOTTS_VALLEY: 408;
    STONYFORD: 409;
    SULPHUR_BANK: 410;
    NEBRASKA_PONCA: 411;
    OKLAHOMA_PONCA: 412;
    CITIZEN_BAND_POTAWATOMI: 413;
    FOREST_COUNTY: 414;
    HANNAHVILLE: 415;
    HURON_POTAWATOMI: 416;
    POKAGON_POTAWATOMI: 417;
    PRAIRIE_BAND: 418;
    WISCONSIN_POTAWATOMI: 419;
    ACOMA: 420;
    ARIZONA_TEWA: 421;
    COCHITI: 422;
    HOPI: 423;
    ISLETA: 424;
    JEMEZ: 425;
    KERES: 426;
    LAGUNA: 427;
    NAMBE: 428;
    PICURIS: 429;
    PIRO: 430;
    POJOAQUE: 431;
    SAN_FELIPE: 432;
    SAN_ILDEFONSO: 433;
    SAN_JUAN_PUEBLO: 434;
    SAN_JUAN_DE: 435;
    SAN_JUAN: 436;
    SANDIA: 437;
    SANTA_ANA: 438;
    SANTA_CLARA: 439;
    SANTO_DOMINGO: 440;
    TAOS: 441;
    TESUQUE: 442;
    TEWA: 443;
    TIGUA: 444;
    ZIA: 445;
    ZUNI: 446;
    DUWAMISH: 447;
    KIKIALLUS: 448;
    LOWER_SKAGIT: 449;
    MUCKLESHOOT: 450;
    NISQUALLY: 451;
    NOOKSACK: 452;
    PORT_MADISON: 453;
    PUYALLUP: 454;
    SAMISH: 455;
    SAUK_SUIATTLE: 456;
    SKOKOMISH: 457;
    SKYKOMISH: 458;
    SNOHOMISH: 459;
    SNOQUALMIE: 460;
    SQUAXIN_ISLAND: 461;
    STEILACOOM: 462;
    STILLAGUAMISH: 463;
    SUQUAMISH: 464;
    SWINOMISH: 465;
    TULALIP: 466;
    UPPER_SKAGIT: 467;
    IOWA_SAC_AND_FOX: 468;
    MISSOURI_SAC_AND_FOX: 469;
    OKLAHOMA_SAC_AND_FOX: 470;
    BIG_CYPRESS: 471;
    BRIGHTON: 472;
    FLORIDA_SEMINOLE: 473;
    HOLLYWOOD_SEMINOLE: 474;
    OKLAHOMA_SEMINOLE: 475;
    SAN_MANUAL: 476;
    ABSENTEE_SHAWNEE: 477;
    EASTERN_SHAWNEE: 478;
    BATTLE_MOUNTAIN: 479;
    DUCKWATER: 480;
    ELKO: 481;
    ELY: 482;
    GOSHUTE: 483;
    PANAMINT: 484;
    RUBY_VALLEY: 485;
    SKULL_VALLEY: 486;
    SOUTH_FORK_SHOSHONE: 487;
    TE_MOAK_WESTERN_SHOSHONE: 488;
    TIMBI_SHA_SHOSHONE: 489;
    WASHAKIE: 490;
    WIND_RIVER_SHOSHONE: 491;
    YOMBA: 492;
    DUCK_VALLEY: 493;
    FALLON: 494;
    FORT_MC_DERMITT: 495;
    BLACKFOOT_SIOUX: 496;
    BRULE_SIOUX: 497;
    CHEYENNE_RIVER_SIOUX: 498;
    CROW_CREEK_SIOUX: 499;
    DAKOTA_SIOUX: 500;
    FLANDREAU_SANTEE: 501;
    FORT_PECK: 502;
    LAKE_TRAVERSE_SIOUX: 503;
    LOWER_BRULE_SIOUX: 504;
    LOWER_SIOUX: 505;
    MDEWAKANTON_SIOUX: 506;
    MINICONJOU: 507;
    OGLALA_SIOUX: 508;
    PINE_RIDGE_SIOUX: 509;
    PIPESTONE_SIOUX: 510;
    PRAIRIE_ISLAND_SIOUX: 511;
    PRIOR_LAKE_SIOUX: 512;
    ROSEBUD_SIOUX: 513;
    SANS_ARC_SIOUX: 514;
    SANTEE_SIOUX: 515;
    SISSETON_WAHPETON: 516;
    SISSETON_SIOUX: 517;
    SPIRIT_LAKE_SIOUX: 518;
    STANDING_ROCK_SIOUX: 519;
    TETON_SIOUX: 520;
    TWO_KETTLE_SIOUX: 521;
    UPPER_SIOUX: 522;
    WAHPEKUTE_SIOUX: 523;
    WAHPETON_SIOUX: 524;
    WAZHAZA_SIOUX: 525;
    YANKTON_SIOUX: 526;
    YANKTONAI_SIOUX: 527;
    AK_CHIN: 528;
    GILA_BEND: 529;
    SAN_XAVIER: 530;
    SELLS: 531;
    COW_CREEK_UMPQUA: 532;
    ALLEN_CANYON: 533;
    UINTAH_UTE: 534;
    UTE_MOUNTAIN_UTE: 535;
    GAY_HEAD_WAMPANOAG: 536;
    MASHPEE_WAMPANOAG: 537;
    ALPINE: 538;
    CARSON: 539;
    DRESSLERVILLE: 540;
    HO_CHUNK: 541;
    NEBRASKA_WINNEBAGO: 542;
    TABLE_BLUFF: 543;
    BARRIO_LIBRE: 544;
    PASCUA_YAQUI: 545;
    CHUKCHANSI: 546;
    TACHI: 547;
    TULE_RIVER: 548;
    COCOPAH: 549;
    HAVASUPAI: 550;
    HUALAPAI: 551;
    MARICOPA: 552;
    MOHAVE: 553;
    QUECHAN: 554;
    YAVAPAI: 555;
    COAST_YUROK: 556;
    ALASKA_INDIAN: 557;
    ESKIMO: 558;
    ALEUT: 559;
    ALASKAN_ATHABASCAN: 560;
    SOUTHEAST_ALASKA: 561;
    AHTNA: 562;
    ALATNA: 563;
    ALEXANDER: 564;
    ALLAKAKET: 565;
    ALANVIK: 566;
    ANVIK: 567;
    ARCTIC: 568;
    BEAVER: 569;
    BIRCH_CREEK: 570;
    CANTWELL: 571;
    CHALKYITSIK: 572;
    CHICKALOON: 573;
    CHISTOCHINA: 574;
    CHITINA: 575;
    CIRCLE: 576;
    COOK_INLET: 577;
    COPPER_CENTER: 578;
    COPPER_RIVER: 579;
    DOT_LAKE: 580;
    DOYON: 581;
    EAGLE: 582;
    EKLUTNA: 583;
    EVANSVILLE: 584;
    FORT_YUKON: 585;
    GAKONA: 586;
    GALENA: 587;
    GRAYLING: 588;
    GULKANA: 589;
    HEALY_LAKE: 590;
    HOLY_CROSS: 591;
    HUGHES: 592;
    HUSLIA: 593;
    ILIAMNA: 594;
    KALTAG: 595;
    KLUTI_KAAH: 596;
    KNIK: 597;
    KOYUKUK: 598;
    LAKE_MINCHUMINA: 599;
    LIME: 600;
    MCGRATH: 601;
    MANLEY_HOT_SPRINGS: 602;
    MENTASTA_LAKE: 603;
    MINTO: 604;
    NENANA: 605;
    NIKOLAI: 606;
    NINILCHIK: 607;
    NONDALTON: 608;
    NORTHWAY: 609;
    NULATO: 610;
    PEDRO_BAY: 611;
    RAMPART: 612;
    RUBY: 613;
    SALAMATOF: 614;
    SELDOVIA: 615;
    SLANA: 616;
    SHAGELUK: 617;
    STEVENS: 618;
    STONY_RIVER: 619;
    TAKOTNA: 620;
    TANACROSS: 621;
    TANAINA: 622;
    TANANA: 623;
    TANANA_CHIEFS: 624;
    TAZLINA: 625;
    TELIDA: 626;
    TETLIN: 627;
    TOK: 628;
    TYONEK: 629;
    VENETIE: 630;
    WISEMAN: 631;
    TLINGIT_HAIDA: 632;
    TSIMSHIAN: 633;
    ANGOON: 634;
    CENTRAL_COUNCIL_OF_TLINGIT_AND_HAIDA_TRIBES: 635;
    CHILKAT: 636;
    CHILKOOT: 637;
    CRAIG: 638;
    DOUGLAS: 639;
    HAIDA: 640;
    HOONAH: 641;
    HYDABURG: 642;
    KAKE: 643;
    KASAAN: 644;
    KENAITZE: 645;
    KETCHIKAN: 646;
    KLAWOCK: 647;
    PELICAN: 648;
    PETERSBURG: 649;
    SAXMAN: 650;
    SITKA: 651;
    TENAKEE_SPRINGS: 652;
    TLINGIT: 653;
    WRANGELL: 654;
    YAKUTAT: 655;
    METLAKATLA: 656;
    GREENLAND_ESKIMO: 657;
    INUPIAT_ESKIMO: 658;
    SIBERIAN_ESKIMO: 659;
    YUPIK_ESKIMO: 660;
    AMBLER: 661;
    ANAKTUVUK: 662;
    ANAKTUVUK_PASS: 663;
    ARCTIC_SLOPE_INUPIAT: 664;
    ARCTIC_SLOPE_CORPORATION: 665;
    ATQASUK: 666;
    BARROW: 667;
    BERING_STRAITS_INUPIAT: 668;
    BREVIG_MISSION: 669;
    BUCKLAND: 670;
    CHINIK: 671;
    COUNCIL: 672;
    DEERING: 673;
    ELIM: 674;
    GOLOVIN: 675;
    INALIK_DIOMEDE: 676;
    INUPIAQ: 677;
    KAKTOVIK: 678;
    KAWERAK: 679;
    KIANA: 680;
    KIVALINA: 681;
    KOBUK: 682;
    KOTZEBUE: 683;
    KOYUK: 684;
    KWIGUK: 685;
    MAUNELUK_INUPIAT: 686;
    NANA_INUPIAT: 687;
    NOATAK: 688;
    NOME: 689;
    NOORVIK: 690;
    NUIQSUT: 691;
    POINT_HOPE: 692;
    POINT_LAY: 693;
    SELAWIK: 694;
    SHAKTOOLIK: 695;
    SHISHMAREF: 696;
    SHUNGNAK: 697;
    SOLOMON: 698;
    TELLER: 699;
    UNALAKLEET: 700;
    WAINWRIGHT: 701;
    WALES: 702;
    WHITE_MOUNTAIN: 703;
    WHITE_MOUNTAIN_INUPIAT: 704;
    MARYS_IGLOO: 705;
    GAMBELL: 706;
    SAVOONGA: 707;
    SIBERIAN_YUPIK: 708;
    AKIACHAK: 709;
    AKIAK: 710;
    ALAKANUK: 711;
    ALEKNAGIK: 712;
    ANDREAFSKY: 713;
    ANIAK: 714;
    ATMAUTLUAK: 715;
    BETHEL: 716;
    BILL_MOORES_SLOUGH: 717;
    BRISTOL_BAY_YUPIK: 718;
    CALISTA_YUPIK: 719;
    CHEFORNAK: 720;
    CHEVAK: 721;
    CHUATHBALUK: 722;
    CLARKS_POINT: 723;
    CROOKED_CREEK: 724;
    DILLINGHAM: 725;
    EEK: 726;
    EKUK: 727;
    EKWOK: 728;
    EMMONAK: 729;
    GOODNEWS_BAY: 730;
    HOOPER_BAY: 731;
    IQURMUIT_RUSSIAN_MISSION: 732;
    KALSKAG: 733;
    KASIGLUK: 734;
    KIPNUK: 735;
    KOLIGANEK: 736;
    KONGIGANAK: 737;
    KOTLIK: 738;
    KWETHLUK: 739;
    KWIGILLINGOK: 740;
    LEVELOCK: 741;
    LOWER_KALSKAG: 742;
    MANOKOTAK: 743;
    MARSHALL: 744;
    MEKORYUK: 745;
    MOUNTAIN_VILLAGE: 746;
    NAKNEK: 747;
    NAPAUMUTE: 748;
    NAPAKIAK: 749;
    NAPASKIAK: 750;
    NEWHALEN: 751;
    NEW_STUYAHOK: 752;
    NEWTOK: 753;
    NIGHTMUTE: 754;
    NUNAPITCHUKV: 755;
    OSCARVILLE: 756;
    PILOT_STATION: 757;
    PITKAS_POINT: 758;
    PLATINUM: 759;
    PORTAGE_CREEK: 760;
    QUINHAGAK: 761;
    RED_DEVIL: 762;
    ST_MICHAEL: 763;
    SCAMMON_BAY: 764;
    SHELDONS_POINT: 765;
    SLEETMUTE: 766;
    STEBBINS: 767;
    TOGIAK: 768;
    TOKSOOK: 769;
    TULUKSKAK: 770;
    TUNTUTULIAK: 771;
    TUNUNAK: 772;
    TWIN_HILLS: 773;
    GEORGETOWN_YUPIK_ESKIMO: 774;
    ST_MARYS: 775;
    UMKUMIATE: 776;
    ALUTIIQ_ALEUT: 777;
    BRISTOL_BAY_ALEUT: 778;
    CHUGACH_ALEUT: 779;
    EYAK: 780;
    KONIAG_ALEUT: 781;
    SUGPIAQ: 782;
    SUQPIGAQ: 783;
    UNANGAN_ALEUT: 784;
    TATITLEK: 785;
    UGASHIK: 786;
    CHIGNIK: 787;
    CHIGNIK_LAKE: 788;
    EGEGIK: 789;
    IGIUGIG: 790;
    IVANOF_BAY: 791;
    KING_SALMON: 792;
    KOKHANOK: 793;
    PERRYVILLE: 794;
    PILOT_POINT: 795;
    PORT_HEIDEN: 796;
    CHENEGA: 797;
    CHUGACH_CORPORATION: 798;
    ENGLISH_BAY: 799;
    PORT_GRAHAM: 800;
    AKHIOK: 801;
    AGDAAGUX: 802;
    KARLUK: 803;
    KODIAK: 804;
    LARSEN_BAY: 805;
    OLD_HARBOR: 806;
    OUZINKIE: 807;
    PORT_LIONS: 808;
    AKUTAN: 809;
    ALEUT_CORPORATION: 810;
    ALEUTIAN: 811;
    ALEUTIAN_ISLANDER: 812;
    ATKA: 813;
    BELKOFSKI: 814;
    CHIGNIK_LAGOON: 815;
    KING_COVE: 816;
    FALSE_PASS: 817;
    NELSON_LAGOON: 818;
    NIKOLSKI: 819;
    PAULOFF_HARBOR: 820;
    QAGAN_TOYAGUNGIN: 821;
    QAWALANGIN: 822;
    ST_GEORGE: 823;
    ST_PAUL: 824;
    SAND_POINT: 825;
    SOUTH_NAKNEK: 826;
    UNALASKA: 827;
    UNGA: 828;
    ASIAN_INDIAN: 829;
    BANGLADESHI: 830;
    BHUTANESE: 831;
    BURMESE: 832;
    CAMBODIAN: 833;
    CHINESE: 834;
    TAIWANESE: 835;
    FILIPINO: 836;
    HMONG: 837;
    INDONESIAN: 838;
    JAPANESE: 839;
    KOREAN: 840;
    LAOTIAN: 841;
    MALAYSIAN: 842;
    OKINAWAN: 843;
    PAKISTANI: 844;
    SRI_LANKAN: 845;
    THAI: 846;
    VIETNAMESE: 847;
    IWO_JIMAN: 848;
    MALDIVIAN: 849;
    NEPALESE: 850;
    SINGAPOREAN: 851;
    MADAGASCAR: 852;
    BLACK: 853;
    AFRICAN_AMERICAN: 854;
    AFRICAN: 855;
    BAHAMIAN: 856;
    BARBADIAN: 857;
    DOMINICAN: 858;
    DOMINICA_ISLANDER: 859;
    HAITIAN: 860;
    JAMAICAN: 861;
    TOBAGOAN: 862;
    TRINIDADIAN: 863;
    WEST_INDIAN: 864;
    BOTSWANAN: 865;
    ETHIOPIAN: 866;
    LIBERIAN: 867;
    NAMIBIAN: 868;
    NIGERIAN: 869;
    ZAIREAN: 870;
    POLYNESIAN: 871;
    MICRONESIAN: 872;
    MELANESIAN: 873;
    OTHER_PACIFIC_ISLANDER: 874;
    NATIVE_HAWAIIAN: 875;
    SAMOAN: 876;
    TAHITIAN: 877;
    TONGAN: 878;
    TOKELAUAN: 879;
    GUAMANIAN_OR_CHAMORRO: 880;
    GUAMANIAN: 881;
    CHAMORRO: 882;
    MARIANA_ISLANDER: 883;
    MARSHALLESE: 884;
    PALAUAN: 885;
    CAROLINIAN: 886;
    KOSRAEAN: 887;
    POHNPEIAN: 888;
    SAIPANESE: 889;
    KIRIBATI: 890;
    CHUUKESE: 891;
    YAPESE: 892;
    FIJIAN: 893;
    PAPUA_NEW_GUINEAN: 894;
    SOLOMON_ISLANDER: 895;
    NEW_HEBRIDES: 896;
    EUROPEAN: 897;
    MIDDLE_EASTERN_OR_NORTH_AFRICAN: 898;
    ARAB: 899;
    ARMENIAN: 900;
    ENGLISH: 901;
    FRENCH: 902;
    GERMAN: 903;
    IRISH: 904;
    ITALIAN: 905;
    POLISH: 906;
    SCOTTISH: 907;
    ASSYRIAN: 908;
    EGYPTIAN: 909;
    IRANIAN: 910;
    IRAQI: 911;
    LEBANESE: 912;
    PALESTINIAN: 913;
    SYRIAN: 914;
    AFGHANISTANI: 915;
    ISRAEILI: 916;
    OTHER_RACE: 917;
  }

  export const Value: ValueMap;
}

export class NarrativeStatusValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NarrativeStatusValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: NarrativeStatusValueSet): NarrativeStatusValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NarrativeStatusValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NarrativeStatusValueSet;
  static deserializeBinaryFromReader(message: NarrativeStatusValueSet, reader: jspb.BinaryReader): NarrativeStatusValueSet;
}

export namespace NarrativeStatusValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    ADDITIONAL: 1;
    GENERATED: 2;
  }

  export const Value: ValueMap;
}

export class OmbEthnicityCategoriesValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OmbEthnicityCategoriesValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: OmbEthnicityCategoriesValueSet): OmbEthnicityCategoriesValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OmbEthnicityCategoriesValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OmbEthnicityCategoriesValueSet;
  static deserializeBinaryFromReader(message: OmbEthnicityCategoriesValueSet, reader: jspb.BinaryReader): OmbEthnicityCategoriesValueSet;
}

export namespace OmbEthnicityCategoriesValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    HISPANIC_OR_LATINO: 1;
    NOT_HISPANIC_OR_LATINO: 2;
  }

  export const Value: ValueMap;
}

export class OmbRaceCategoriesValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OmbRaceCategoriesValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: OmbRaceCategoriesValueSet): OmbRaceCategoriesValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OmbRaceCategoriesValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OmbRaceCategoriesValueSet;
  static deserializeBinaryFromReader(message: OmbRaceCategoriesValueSet, reader: jspb.BinaryReader): OmbRaceCategoriesValueSet;
}

export namespace OmbRaceCategoriesValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    AMERICAN_INDIAN_OR_ALASKA_NATIVE: 1;
    ASIAN: 2;
    BLACK_OR_AFRICAN_AMERICAN: 3;
    NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER: 4;
    WHITE: 5;
    UNK: 6;
    ASKU: 7;
  }

  export const Value: ValueMap;
}

export class USCoreClinicalNoteTypeValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreClinicalNoteTypeValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreClinicalNoteTypeValueSet): USCoreClinicalNoteTypeValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreClinicalNoteTypeValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreClinicalNoteTypeValueSet;
  static deserializeBinaryFromReader(message: USCoreClinicalNoteTypeValueSet, reader: jspb.BinaryReader): USCoreClinicalNoteTypeValueSet;
}

export namespace USCoreClinicalNoteTypeValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    V_18842_5: 1;
    V_11488_4: 2;
    V_34117_2: 3;
    V_11506_3: 4;
    V_28570_0: 5;
  }

  export const Value: ValueMap;
}

export class USCoreConditionCategoryCodesValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreConditionCategoryCodesValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreConditionCategoryCodesValueSet): USCoreConditionCategoryCodesValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreConditionCategoryCodesValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreConditionCategoryCodesValueSet;
  static deserializeBinaryFromReader(message: USCoreConditionCategoryCodesValueSet, reader: jspb.BinaryReader): USCoreConditionCategoryCodesValueSet;
}

export namespace USCoreConditionCategoryCodesValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    PROBLEM_LIST_ITEM: 1;
    ENCOUNTER_DIAGNOSIS: 2;
    HEALTH_CONCERN: 3;
  }

  export const Value: ValueMap;
}

export class USCoreDiagnosticReportCategoryValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreDiagnosticReportCategoryValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreDiagnosticReportCategoryValueSet): USCoreDiagnosticReportCategoryValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreDiagnosticReportCategoryValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreDiagnosticReportCategoryValueSet;
  static deserializeBinaryFromReader(message: USCoreDiagnosticReportCategoryValueSet, reader: jspb.BinaryReader): USCoreDiagnosticReportCategoryValueSet;
}

export namespace USCoreDiagnosticReportCategoryValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    LP29684_5: 1;
    LP29708_2: 2;
    LP7839_6: 3;
  }

  export const Value: ValueMap;
}

export class USCoreDocumentReferenceTypeValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreDocumentReferenceTypeValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreDocumentReferenceTypeValueSet): USCoreDocumentReferenceTypeValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreDocumentReferenceTypeValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreDocumentReferenceTypeValueSet;
  static deserializeBinaryFromReader(message: USCoreDocumentReferenceTypeValueSet, reader: jspb.BinaryReader): USCoreDocumentReferenceTypeValueSet;
}

export namespace USCoreDocumentReferenceTypeValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    UNK: 1;
  }

  export const Value: ValueMap;
}

export class USCoreObservationSmokingStatusStatusValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreObservationSmokingStatusStatusValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreObservationSmokingStatusStatusValueSet): USCoreObservationSmokingStatusStatusValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreObservationSmokingStatusStatusValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreObservationSmokingStatusStatusValueSet;
  static deserializeBinaryFromReader(message: USCoreObservationSmokingStatusStatusValueSet, reader: jspb.BinaryReader): USCoreObservationSmokingStatusStatusValueSet;
}

export namespace USCoreObservationSmokingStatusStatusValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    FINAL: 1;
    ENTERED_IN_ERROR: 2;
  }

  export const Value: ValueMap;
}

export class USCoreProvenancePaticipantTypeCodesValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreProvenancePaticipantTypeCodesValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreProvenancePaticipantTypeCodesValueSet): USCoreProvenancePaticipantTypeCodesValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreProvenancePaticipantTypeCodesValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreProvenancePaticipantTypeCodesValueSet;
  static deserializeBinaryFromReader(message: USCoreProvenancePaticipantTypeCodesValueSet, reader: jspb.BinaryReader): USCoreProvenancePaticipantTypeCodesValueSet;
}

export namespace USCoreProvenancePaticipantTypeCodesValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    TRANSMITTER: 1;
    ENTERER: 2;
    PERFORMER: 3;
    AUTHOR: 4;
    VERIFIER: 5;
    LEGAL: 6;
    ATTESTER: 7;
    INFORMANT: 8;
    CUSTODIAN: 9;
    ASSEMBLER: 10;
    COMPOSER: 11;
  }

  export const Value: ValueMap;
}

export class USCoreProviderRoleNuccValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreProviderRoleNuccValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreProviderRoleNuccValueSet): USCoreProviderRoleNuccValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreProviderRoleNuccValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreProviderRoleNuccValueSet;
  static deserializeBinaryFromReader(message: USCoreProviderRoleNuccValueSet, reader: jspb.BinaryReader): USCoreProviderRoleNuccValueSet;
}

export namespace USCoreProviderRoleNuccValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    COUNSELOR: 1;
    PSYCHOANALYST: 2;
    POETRY_THERAPIST: 3;
    CLINICAL_NEUROPSYCHOLOGIST: 4;
    BEHAVIOR_ANALYST: 5;
    PSYCHOLOGIST: 6;
    SOCIAL_WORKER: 7;
    ASSISTANT_BEHAVIOR_ANALYST: 8;
    MARRIAGE_FAMILY_THERAPIST: 9;
    BEHAVIOR_TECHNICIAN: 10;
    CHIROPRACTOR: 11;
    DENTIST: 12;
    DENTURIST: 13;
    DENTAL_HYGIENIST: 14;
    DENTAL_THERAPIST: 15;
    ADVANCED_PRACTICE_DENTAL_THERAPIST: 16;
    ORAL_MEDICINIST: 17;
    DENTAL_ASSISTANT: 18;
    DENTAL_LABORATORY_TECHNICIAN: 19;
    DIETARY_MANAGER: 20;
    NUTRITIONIST: 21;
    DIETITIAN_REGISTERED: 22;
    DIETETIC_TECHNICIAN_REGISTERED: 23;
    PERSONAL_EMERGENCY_RESPONSE_ATTENDANT: 24;
    EMERGENCY_MEDICAL_TECHNICIAN_PARAMEDIC: 25;
    EMERGENCY_MEDICAL_TECHNICIAN_INTERMEDIATE: 26;
    EMERGENCY_MEDICAL_TECHNICIAN_BASIC: 27;
    OPTOMETRIST: 28;
    TECHNICIAN_TECHNOLOGIST: 29;
    REGISTERED_NURSE: 30;
    LICENSED_PRACTICAL_NURSE: 31;
    LICENSED_VOCATIONAL_NURSE: 32;
    LICENSED_PSYCHIATRIC_TECHNICIAN: 33;
    MEDICAL_GENETICS_PH_D_MEDICAL_GENETICS: 34;
    GENETIC_COUNSELOR_MS: 35;
    MILITARY_HEALTH_CARE_PROVIDER: 36;
    ACUPUNCTURIST: 37;
    CASE_MANAGER_CARE_COORDINATOR: 38;
    INTERPRETER: 39;
    CONTRACTOR: 40;
    DRIVER: 41;
    MECHANOTHERAPIST: 42;
    NAPRAPATH: 43;
    COMMUNITY_HEALTH_WORKER: 44;
    LEGAL_MEDICINE_173000000_X: 45;
    REFLEXOLOGIST: 46;
    SLEEP_SPECIALIST_PH_D: 47;
    MEALS: 48;
    SPECIALIST: 49;
    HEALTH_EDUCATOR: 50;
    VETERINARIAN: 51;
    LACTATION_CONSULTANT_NON_RN: 52;
    CLINICAL_ETHICIST: 53;
    NATUROPATH: 54;
    HOMEOPATH: 55;
    MIDWIFE_LAY: 56;
    PEER_SPECIALIST: 57;
    MIDWIFE: 58;
    FUNERAL_DIRECTOR: 59;
    LODGING: 60;
    PHARMACIST: 61;
    PHARMACY_TECHNICIAN: 62;
    MULTI_SPECIALTY: 63;
    SINGLE_SPECIALTY: 64;
    INDEPENDENT_MEDICAL_EXAMINER: 65;
    PHLEBOLOGY: 66;
    NEUROMUSCULOSKELETAL_MEDICINE_SPORTS_MEDICINE: 67;
    NEUROMUSCULOSKELETAL_MEDICINE_OMM: 68;
    ORAL_MAXILLOFACIAL_SURGERY: 69;
    TRANSPLANT_SURGERY: 70;
    ELECTRODIAGNOSTIC_MEDICINE: 71;
    ALLERGY_IMMUNOLOGY: 72;
    ANESTHESIOLOGY: 73;
    DERMATOLOGY: 74;
    EMERGENCY_MEDICINE: 75;
    FAMILY_MEDICINE: 76;
    INTERNAL_MEDICINE: 77;
    NEUROLOGICAL_SURGERY: 78;
    NUCLEAR_MEDICINE: 79;
    OBSTETRICS_GYNECOLOGY: 80;
    OPHTHALMOLOGY: 81;
    ORTHOPAEDIC_SURGERY: 82;
    OTOLARYNGOLOGY: 83;
    PEDIATRICS: 84;
    PHYSICAL_MEDICINE_REHABILITATION: 85;
    PLASTIC_SURGERY: 86;
    SURGERY: 87;
    UROLOGY: 88;
    COLON_RECTAL_SURGERY: 89;
    GENERAL_PRACTICE: 90;
    THORACIC_SURGERY_CARDIOTHORACIC_VASCULAR_SURGERY: 91;
    HOSPITALIST: 92;
    CLINICAL_PHARMACOLOGY: 93;
    LEGAL_MEDICINE_209800000_X: 94;
    ASSISTANT_PODIATRIC: 95;
    PODIATRIST: 96;
    ART_THERAPIST: 97;
    DEVELOPMENTAL_THERAPIST: 98;
    ORTHOTIST: 99;
    MASTECTOMY_FITTER: 100;
    PEDORTHIST: 101;
    PROSTHETIST: 102;
    CLINICAL_EXERCISE_PHYSIOLOGIST: 103;
    OCCUPATIONAL_THERAPY_ASSISTANT: 104;
    ORTHOTIC_FITTER: 105;
    PHYSICAL_THERAPIST: 106;
    PHYSICAL_THERAPY_ASSISTANT: 107;
    REHABILITATION_PRACTITIONER: 108;
    SPECIALIST_TECHNOLOGIST_225500000_X: 109;
    DANCE_THERAPIST: 110;
    MASSAGE_THERAPIST: 111;
    RECREATION_THERAPIST: 112;
    MUSIC_THERAPIST: 113;
    PULMONARY_FUNCTION_TECHNOLOGIST: 114;
    REHABILITATION_COUNSELOR: 115;
    OCCUPATIONAL_THERAPIST: 116;
    RECREATIONAL_THERAPIST_ASSISTANT: 117;
    KINESIOTHERAPIST: 118;
    RESPIRATORY_THERAPIST_CERTIFIED: 119;
    RESPIRATORY_THERAPIST_REGISTERED: 120;
    ANAPLASTOLOGIST: 121;
    AUDIOLOGIST: 122;
    SPECIALIST_TECHNOLOGIST_235500000_X: 123;
    SPEECH_LANGUAGE_PATHOLOGIST: 124;
    AUDIOLOGIST_HEARING_AID_FITTER: 125;
    HEARING_INSTRUMENT_SPECIALIST: 126;
    PERFUSIONIST: 127;
    RADIOLOGY_PRACTITIONER_ASSISTANT: 128;
    SPECIALIST_TECHNOLOGIST_PATHOLOGY: 129;
    TECHNICIAN_PATHOLOGY: 130;
    TECHNICIAN_CARDIOLOGY: 131;
    SPECIALIST_TECHNOLOGIST_CARDIOVASCULAR: 132;
    SPECIALIST_TECHNOLOGIST_HEALTH_INFORMATION: 133;
    SPECIALIST_TECHNOLOGIST_OTHER: 134;
    TECHNICIAN_HEALTH_INFORMATION: 135;
    RADIOLOGIC_TECHNOLOGIST: 136;
    TECHNICIAN_OTHER: 137;
    LOCAL_EDUCATION_AGENCY_LEA: 138;
    CASE_MANAGEMENT: 139;
    DAY_TRAINING_DEVELOPMENTALLY_DISABLED_SERVICES: 140;
    HOME_HEALTH: 141;
    HOME_INFUSION: 142;
    HOSPICE_CARE_COMMUNITY_BASED: 143;
    NURSING_CARE: 144;
    PUBLIC_HEALTH_OR_WELFARE: 145;
    COMMUNITY_BEHAVIORAL_HEALTH: 146;
    PROGRAM_OF_ALL_INCLUSIVE_CARE_FOR_THE_ELDERLY_PACE_PROVIDER_ORGANIZATION: 147;
    VOLUNTARY_OR_CHARITABLE: 148;
    SUPPORTS_BROKERAGE: 149;
    EARLY_INTERVENTION_PROVIDER_AGENCY: 150;
    FOSTER_CARE_AGENCY: 151;
    IN_HOME_SUPPORTIVE_CARE: 152;
    CLINIC_CENTER: 153;
    EPILEPSY_UNIT: 154;
    PSYCHIATRIC_UNIT: 155;
    REHABILITATION_UNIT: 156;
    MEDICARE_DEFINED_SWING_BED_UNIT: 157;
    REHABILITATION_SUBSTANCE_USE_DISORDER_UNIT: 158;
    CHRONIC_DISEASE_HOSPITAL: 159;
    LONG_TERM_CARE_HOSPITAL: 160;
    RELIGIOUS_NONMEDICAL_HEALTH_CARE_INSTITUTION: 161;
    GENERAL_ACUTE_CARE_HOSPITAL: 162;
    PSYCHIATRIC_HOSPITAL: 163;
    REHABILITATION_HOSPITAL: 164;
    SPECIAL_HOSPITAL: 165;
    MILITARY_HOSPITAL: 166;
    CHRISTIAN_SCIENCE_SANITORIUM: 167;
    MILITARY_CLINICAL_MEDICAL_LABORATORY: 168;
    CLINICAL_MEDICAL_LABORATORY: 169;
    DENTAL_LABORATORY: 170;
    PHYSIOLOGICAL_LABORATORY: 171;
    EXCLUSIVE_PROVIDER_ORGANIZATION: 172;
    HEALTH_MAINTENANCE_ORGANIZATION: 173;
    PREFERRED_PROVIDER_ORGANIZATION: 174;
    POINT_OF_SERVICE: 175;
    ASSISTED_LIVING_FACILITY: 176;
    INTERMEDIATE_CARE_FACILITY_MENTAL_ILLNESS: 177;
    ALZHEIMER_CENTER_DEMENTIA_CENTER: 178;
    CUSTODIAL_CARE_FACILITY: 179;
    NURSING_FACILITY_INTERMEDIATE_CARE_FACILITY: 180;
    SKILLED_NURSING_FACILITY: 181;
    HOSPICE_INPATIENT: 182;
    INTERMEDIATE_CARE_FACILITY_MENTALLY_RETARDED: 183;
    CHRISTIAN_SCIENCE_FACILITY: 184;
    RESIDENTIAL_TREATMENT_FACILITY_MENTAL_RETARDATION_AND_OR_DEVELOPMENTAL_DISABILITIES: 185;
    RESIDENTIAL_TREATMENT_FACILITY_PHYSICAL_DISABILITIES: 186;
    COMMUNITY_BASED_RESIDENTIAL_TREATMENT_FACILITY_MENTAL_ILLNESS: 187;
    COMMUNITY_BASED_RESIDENTIAL_TREATMENT_FACILITY_MENTAL_RETARDATION_AND_OR_DEVELOPMENTAL_DISABILITIES: 188;
    RESIDENTIAL_TREATMENT_FACILITY_EMOTIONALLY_DISTURBED_CHILDREN: 189;
    PSYCHIATRIC_RESIDENTIAL_TREATMENT_FACILITY: 190;
    SUBSTANCE_ABUSE_REHABILITATION_FACILITY: 191;
    BLOOD_BANK: 192;
    MILITARY_U_S_COAST_GUARD_PHARMACY: 193;
    DEPARTMENT_OF_VETERANS_AFFAIRS_VA_PHARMACY: 194;
    INDIAN_HEALTH_SERVICE_TRIBAL_URBAN_INDIAN_HEALTH_I_T_U_PHARMACY: 195;
    NON_PHARMACY_DISPENSING_SITE: 196;
    DURABLE_MEDICAL_EQUIPMENT_MEDICAL_SUPPLIES: 197;
    EYE_BANK: 198;
    EYEWEAR_SUPPLIER: 199;
    HEARING_AID_EQUIPMENT: 200;
    HOME_DELIVERED_MEALS: 201;
    EMERGENCY_RESPONSE_SYSTEM_COMPANIES: 202;
    PHARMACY: 203;
    PROSTHETIC_ORTHOTIC_SUPPLIER: 204;
    MEDICAL_FOODS_SUPPLIER: 205;
    ORGAN_PROCUREMENT_ORGANIZATION: 206;
    PORTABLE_X_RAY_AND_OR_OTHER_PORTABLE_DIAGNOSTIC_IMAGING_SUPPLIER: 207;
    AMBULANCE: 208;
    MILITARY_U_S_COAST_GUARD_TRANSPORT: 209;
    SECURED_MEDICAL_TRANSPORT_VAN: 210;
    NON_EMERGENCY_MEDICAL_TRANSPORT_VAN: 211;
    TAXI: 212;
    AIR_CARRIER: 213;
    BUS: 214;
    PRIVATE_VEHICLE: 215;
    TRAIN: 216;
    TRANSPORTATION_BROKER: 217;
    PHYSICIAN_ASSISTANT: 218;
    NURSE_PRACTITIONER: 219;
    CLINICAL_NURSE_SPECIALIST: 220;
    NURSE_ANESTHETIST_CERTIFIED_REGISTERED: 221;
    ADVANCED_PRACTICE_MIDWIFE: 222;
    ANESTHESIOLOGIST_ASSISTANT: 223;
    CHORE_PROVIDER: 224;
    ADULT_COMPANION: 225;
    DAY_TRAINING_HABILITATION_SPECIALIST: 226;
    TECHNICIAN: 227;
    DOULA: 228;
    RELIGIOUS_NONMEDICAL_PRACTITIONER: 229;
    RELIGIOUS_NONMEDICAL_NURSING_PERSONNEL: 230;
    HOME_HEALTH_AIDE: 231;
    NURSING_HOME_ADMINISTRATOR: 232;
    HOMEMAKER: 233;
    NURSES_AIDE: 234;
    RESPITE_CARE: 235;
    STUDENT_IN_AN_ORGANIZED_HEALTH_CARE_EDUCATION_TRAINING_PROGRAM: 236;
    PREVENTION_PROFESSIONAL: 237;
  }

  export const Value: ValueMap;
}

export class USCoreSmokingStatusObservationCodesValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreSmokingStatusObservationCodesValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreSmokingStatusObservationCodesValueSet): USCoreSmokingStatusObservationCodesValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreSmokingStatusObservationCodesValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreSmokingStatusObservationCodesValueSet;
  static deserializeBinaryFromReader(message: USCoreSmokingStatusObservationCodesValueSet, reader: jspb.BinaryReader): USCoreSmokingStatusObservationCodesValueSet;
}

export namespace USCoreSmokingStatusObservationCodesValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    TOBACCO_SMOKING_STATUS_NHIS: 1;
  }

  export const Value: ValueMap;
}

export class USCoreVaccineAdministeredValueSetCvxValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreVaccineAdministeredValueSetCvxValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreVaccineAdministeredValueSetCvxValueSet): USCoreVaccineAdministeredValueSetCvxValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreVaccineAdministeredValueSetCvxValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreVaccineAdministeredValueSetCvxValueSet;
  static deserializeBinaryFromReader(message: USCoreVaccineAdministeredValueSetCvxValueSet, reader: jspb.BinaryReader): USCoreVaccineAdministeredValueSetCvxValueSet;
}

export namespace USCoreVaccineAdministeredValueSetCvxValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    DIPHTHERIA_TETANUS_TOXOIDS_AND_PERTUSSIS_VACCINE: 1;
    TRIVALENT_POLIOVIRUS_VACCINE_LIVE_ORAL: 2;
    MEASLES_MUMPS_AND_RUBELLA_VIRUS_VACCINE: 3;
    MEASLES_AND_RUBELLA_VIRUS_VACCINE: 4;
    MEASLES_VIRUS_VACCINE: 5;
    RUBELLA_VIRUS_VACCINE: 6;
    MUMPS_VIRUS_VACCINE: 7;
    HEPATITIS_B_VACCINE_PEDIATRIC_OR_PEDIATRIC_ADOLESCENT_DOSAGE: 8;
    TETANUS_AND_DIPHTHERIA_TOXOIDS_ADSORBED_PRESERVATIVE_FREE_FOR_ADULT_USE_2_LF_OF_TETANUS_TOXOID_AND_2_LF_OF_DIPHTHERIA_TOXOID: 9;
    POLIOVIRUS_VACCINE_INACTIVATED: 10;
    PNEUMOCOCCAL_CONJUGATE_VACCINE_7_VALENT: 11;
    TYPHOID_VI_CAPSULAR_POLYSACCHARIDE_VACCINE: 12;
    DTP_HAEMOPHILUS_INFLUENZAE_TYPE_B_CONJUGATE_AND_HEPATITIS_B_VACCINE: 13;
    MENINGOCOCCAL_C_CONJUGATE_VACCINE: 14;
    HEPATITIS_A_AND_HEPATITIS_B_VACCINE: 15;
    VACCINIA_SMALLPOX_VACCINE_DILUTED: 16;
    DIPHTHERIA_TETANUS_TOXOIDS_AND_ACELLULAR_PERTUSSIS_VACCINE_5_PERTUSSIS_ANTIGENS: 17;
    DIPHTHERIA_TETANUS_TOXOIDS_AND_ACELLULAR_PERTUSSIS_VACCINE_UNSPECIFIED_FORMULATION: 18;
    MENINGOCOCCAL_ACWY_VACCINE_UNSPECIFIED_FORMULATION: 19;
    PNEUMOCOCCAL_VACCINE_UNSPECIFIED_FORMULATION: 20;
    PERTUSSIS_VACCINE: 21;
    D_TA_P_HEPATITIS_B_AND_POLIOVIRUS_VACCINE: 22;
    INFLUENZA_VIRUS_VACCINE_LIVE_ATTENUATED_FOR_INTRANASAL_USE: 23;
    TETANUS_TOXOID_UNSPECIFIED_FORMULATION: 24;
    TETANUS_AND_DIPHTHERIA_TOXOIDS_ADSORBED_PRESERVATIVE_FREE_FOR_ADULT_USE_5_LF_OF_TETANUS_TOXOID_AND_2_LF_OF_DIPHTHERIA_TOXOID: 25;
    MENINGOCOCCAL_POLYSACCHARIDE_GROUPS_A_C_Y_AND_W_135_DIPHTHERIA_TOXOID_CONJUGATE_VACCINE_MCV4_P: 26;
    TETANUS_TOXOID_REDUCED_DIPHTHERIA_TOXOID_AND_ACELLULAR_PERTUSSIS_VACCINE_ADSORBED: 27;
    ROTAVIRUS_LIVE_PENTAVALENT_VACCINE: 28;
    VARICELLA_ZOSTER_IMMUNE_GLOBULIN_INVESTIGATIONAL_NEW_DRUG: 29;
    HUMAN_PAPILLOMA_VIRUS_VACCINE_BIVALENT: 30;
    ROTAVIRUS_LIVE_MONOVALENT_VACCINE: 31;
    DIPHTHERIA_ANTITOXIN: 32;
    DIPHTHERIA_TETANUS_TOXOIDS_AND_ACELLULAR_PERTUSSIS_VACCINE_HAEMOPHILUS_INFLUENZAE_TYPE_B_CONJUGATE_AND_POLIOVIRUS_VACCINE_INACTIVATED_D_TA_P_HIB_IPV: 33;
    ZOSTER_VACCINE_LIVE: 34;
    ROTAVIRUS_VACCINE_UNSPECIFIED_FORMULATION: 35;
    INFLUENZA_VIRUS_VACCINE_H5_N1_A_VIETNAM_1203_2004_NATIONAL_STOCKPILE: 36;
    NOVEL_INFLUENZA_H1_N1_09_LIVE_VIRUS_FOR_NASAL_ADMINISTRATION: 37;
    NOVEL_INFLUENZA_H1_N1_09_PRESERVATIVE_FREE_INJECTABLE: 38;
    NOVEL_INFLUENZA_H1_N1_09_INJECTABLE: 39;
    NOVEL_INFLUENZA_H1_N1_09_ALL_FORMULATIONS: 40;
    JAPANESE_ENCEPHALITIS_VACCINE_UNSPECIFIED_FORMULATION: 41;
    TETANUS_IMMUNE_GLOBULIN_13: 42;
    DIPHTHERIA_TETANUS_TOXOIDS_AND_ACELLULAR_PERTUSSIS_VACCINE_AND_POLIOVIRUS_VACCINE_INACTIVATED: 43;
    HISTORICAL_RECORD_OF_A_TYPHUS_VACCINATION: 44;
    HISTORICAL_DIPHTHERIA_AND_TETANUS_TOXOIDS_AND_ACELLULAR_PERTUSSIS_POLIOVIRUS_HAEMOPHILUS_B_CONJUGATE_AND_HEPATITIS_B_RECOMBINANT_VACCINE: 45;
    PNEUMOCOCCAL_CONJUGATE_VACCINE_13_VALENT: 46;
    JAPANESE_ENCEPHALITIS_VACCINE_FOR_INTRAMUSCULAR_ADMINISTRATION: 47;
    INFLUENZA_HIGH_DOSE_SEASONAL_PRESERVATIVE_FREE: 48;
    MENINGOCOCCAL_OLIGOSACCHARIDE_GROUPS_A_C_Y_AND_W_135_DIPHTHERIA_TOXOID_CONJUGATE_VACCINE_MCV4_O: 49;
    HPV_UNSPECIFIED_FORMULATION: 50;
    TETANUS_AND_DIPHTHERIA_TOXOIDS_NOT_ADSORBED_FOR_ADULT_USE: 51;
    TD_ADULT_UNSPECIFIED_FORMULATION: 52;
    IMMUNE_GLOBULIN_UNSPECIFIED_FORMULATION: 53;
    INFLUENZA_SEASONAL_INJECTABLE_PRESERVATIVE_FREE: 54;
    INFLUENZA_SEASONAL_INJECTABLE: 55;
    TETANUS_TOXOID_NOT_ADSORBED: 56;
    ADENOVIRUS_TYPE_4_AND_TYPE_7_LIVE_ORAL: 57;
    SEASONAL_INFLUENZA_INTRADERMAL_PRESERVATIVE_FREE: 58;
    MENINGOCOCCAL_MCV4_UNSPECIFIED_CONJUGATE_FORMULATION_GROUPS_A_C_Y_AND_W_135: 59;
    MENINGOCOCCAL_GROUPS_C_AND_Y_AND_HAEMOPHILUS_B_TETANUS_TOXOID_CONJUGATE_VACCINE: 60;
    INFLUENZA_LIVE_INTRANASAL_QUADRIVALENT: 61;
    INFLUENZA_VIRUS_VACCINE_SPLIT_VIRUS_INCL_PURIFIED_SURFACE_ANTIGEN_RETIRED_CODE: 62;
    INFLUENZA_INJECTABLE_QUADRIVALENT_PRESERVATIVE_FREE: 63;
    INFLUENZA_NASAL_UNSPECIFIED_FORMULATION: 64;
    PNEUMOCOCCAL_CONJUGATE_UNSPECIFIED_FORMULATION: 65;
    INFLUENZA_INJECTABLE_MADIN_DARBY_CANINE_KIDNEY_PRESERVATIVE_FREE: 66;
    SEASONAL_TRIVALENT_RECOMBINANT_INJECTABLE_INFLUENZA_VACCINE_PRESERVATIVE_FREE: 67;
    RHO_D_IMMUNE_GLOBULIN_IV_OR_IM: 68;
    RHO_D_IMMUNE_GLOBULIN_IM: 69;
    INFLUENZA_INJECTABLE_QUADRIVALENT_CONTAINS_PRESERVATIVE: 70;
    RHO_D_UNSPECIFIED_FORMULATION: 71;
    INFLUENZA_VIRUS_VACCINE_WHOLE_VIRUS: 72;
    INFLUENZA_A_MONOVALENT_H5_N1_ADJUVANTED_NATIONAL_STOCKPILE_2013: 73;
    INFLUENZA_INJECTABLEQUADRIVALENT_PRESERVATIVE_FREE_PEDIATRIC: 74;
    MENINGOCOCCAL_B_VACCINE_FULLY_RECOMBINANT: 75;
    MENINGOCOCCAL_B_VACCINE_RECOMBINANT_OMV_ADJUVANTED: 76;
    MENINGOCOCCAL_B_UNSPECIFIED_FORMULATION: 77;
    HUMAN_PAPILLOMAVIRUS_9_VALENT_VACCINE: 78;
    INFLUENZA_INTRADERMAL_QUADRIVALENT_PRESERVATIVE_FREE_INJECTABLE: 79;
    MENINGOCOCCAL_VACCINE_OF_UNKNOWN_FORMULATION_AND_UNKNOWN_SEROGROUPS: 80;
    SEASONAL_TRIVALENT_INFLUENZA_VACCINE_ADJUVANTED_PRESERVATIVE_FREE: 81;
    HEP_A_LIVE_ATTENUATED_IM: 82;
    HAEMOPHILUS_INFLUENZAE_TYPE_B_VACCINE_CONJUGATE_UNSPECIFIED_FORMULATION: 83;
    NON_US_DIPHTHERIA_TETANUS_TOXOIDS_AND_ACELLULAR_PERTUSSIS_VACCINE_HAEMOPHILUS_INFLUENZAE_TYPE_B_CONJUGATE_AND_POLIOVIRUS_VACCINE_INACTIVATED_D_TA_P_HIB_IPV: 84;
    INFLUENZA_INJECTABLE_MADIN_DARBY_CANINE_KIDNEY_PRESERVATIVE_FREE_QUADRIVALENT: 85;
    CHOLERA_WC_R_BS: 86;
    CHOLERA_BIV_WC: 87;
    CHOLERA_LIVE_ATTENUATED: 88;
    HUMAN_RABIES_VACCINE_FROM_HUMAN_DIPLOID_CELL_CULTURE: 89;
    HUMAN_RABIES_VACCINE_FROM_CHICKEN_FIBROBLAST_CULTURE: 90;
    PNEUMOCOCCAL_CONJUGATE_VACCINE_10_VALENT: 91;
    NON_US_BIVALENT_ORAL_POLIO_VACCINE_TYPES_1_AND_3: 92;
    NON_US_MONOVALENT_ORAL_POLIO_VACCINE_UNSPECIFIED_FORMULATION: 93;
    RABIES_VACCINE_FOR_INTRAMUSCULAR_INJECTION_RETIRED_CODE: 94;
    TETANUS_IMMUNE_GLOBULIN_180: 95;
    ANTHRAX_IMMUNE_GLOBULIN: 96;
    ORAL_POLIO_VACCINE_UNSPECIFIED_FORMULATION: 97;
    YELLOW_FEVER_VACCINE_ALTERNATIVE_FORMULATION: 98;
    YELLOW_FEVER_VACCINE_UNSPECIFIED_FORMULATION: 99;
    SEASONAL_QUADRIVALENT_RECOMBINANT_INJECTABLE_INFLUENZA_VACCINE_PRESERVATIVE_FREE: 100;
    INFLUENZA_INJECTABLE_MADIN_DARBY_CANINE_KIDNEY_QUADRIVALENT_WITH_PRESERVATIVE: 101;
    ZOSTER_VACCINE_RECOMBINANT: 102;
    ZOSTER_VACCINE_UNSPECIFIED_FORMULATION: 103;
    HEPATITIS_B_VACCINE_RECOMBINANT_CP_G_ADJUVANTED: 104;
    BACILLUS_CALMETTE_GUERIN_VACCINE: 105;
    DIPHTHERIA_TETANUS_TOXOIDS_AND_ACELLULAR_PERTUSSIS_VACCINE: 106;
    VARICELLA_VIRUS_VACCINE: 107;
    DTP_HAEMOPHILUS_INFLUENZAE_TYPE_B_CONJUGATE_VACCINE: 108;
    PLAGUE_VACCINE: 109;
    ANTHRAX_VACCINE: 110;
    TYPHOID_VACCINE_LIVE_ORAL: 111;
    CHOLERA_VACCINE_UNSPECIFIED_FORMULATION: 112;
    BOTULINUM_ANTITOXIN: 113;
    DIPHTHERIA_AND_TETANUS_TOXOIDS_ADSORBED_FOR_PEDIATRIC_USE: 114;
    CYTOMEGALOVIRUS_IMMUNE_GLOBULIN_INTRAVENOUS: 115;
    HEPATITIS_B_IMMUNE_GLOBULIN: 116;
    HEPATITIS_A_VACCINE_PEDIATRIC_DOSAGE_UNSPECIFIED_FORMULATION: 117;
    MENINGOCOCCAL_POLYSACCHARIDE_VACCINE_MPSV4: 118;
    PNEUMOCOCCAL_POLYSACCHARIDE_VACCINE_23_VALENT: 119;
    RABIES_IMMUNE_GLOBULIN: 120;
    TETANUS_TOXOID_ADSORBED: 121;
    VARICELLA_ZOSTER_IMMUNE_GLOBULIN: 122;
    YELLOW_FEVER_VACCINE: 123;
    RUBELLA_AND_MUMPS_VIRUS_VACCINE: 124;
    JAPANESE_ENCEPHALITIS_VACCINE_SC: 125;
    RABIES_VACCINE_FOR_INTRADERMAL_INJECTION: 126;
    TYPHOID_VACCINE_PARENTERAL_OTHER_THAN_ACETONE_KILLED_DRIED: 127;
    HEPATITIS_B_VACCINE_ADOLESCENT_HIGH_RISK_INFANT_DOSAGE: 128;
    HEPATITIS_B_VACCINE_ADULT_DOSAGE: 129;
    HEPATITIS_B_VACCINE_DIALYSIS_PATIENT_DOSAGE: 130;
    HEPATITIS_B_VACCINE_UNSPECIFIED_FORMULATION: 131;
    HAEMOPHILUS_INFLUENZAE_TYPE_B_VACCINE_PRP_D_CONJUGATE: 132;
    HAEMOPHILUS_INFLUENZAE_TYPE_B_VACCINE_HB_OC_CONJUGATE: 133;
    HAEMOPHILUS_INFLUENZAE_TYPE_B_VACCINE_PRP_T_CONJUGATE: 134;
    HAEMOPHILUS_INFLUENZAE_TYPE_B_VACCINE_PRP_OMP_CONJUGATE: 135;
    D_TA_P_HAEMOPHILUS_INFLUENZAE_TYPE_B_CONJUGATE_VACCINE: 136;
    HAEMOPHILUS_INFLUENZAE_TYPE_B_CONJUGATE_AND_HEPATITIS_B_VACCINE: 137;
    HEPATITIS_A_VACCINE_ADULT_DOSAGE: 138;
    TYPHOID_VACCINE_PARENTERAL_ACETONE_KILLED_DRIED_U_S_MILITARY: 139;
    ADENOVIRUS_VACCINE_TYPE_4_LIVE_ORAL: 140;
    ADENOVIRUS_VACCINE_TYPE_7_LIVE_ORAL: 141;
    HUMAN_PAPILLOMA_VIRUS_VACCINE_QUADRIVALENT: 142;
    LYME_DISEASE_VACCINE: 143;
    PARAINFLUENZA_3_VIRUS_VACCINE: 144;
    RESPIRATORY_SYNCYTIAL_VIRUS_IMMUNE_GLOBULIN_INTRAVENOUS: 145;
    ROTAVIRUS_LIVE_TETRAVALENT_VACCINE: 146;
    VACCINIA_SMALLPOX_VACCINE: 147;
    STAPHYLOCOCCUS_BACTERIOPHAGE_LYSATE: 148;
    TICK_BORNE_ENCEPHALITIS_VACCINE: 149;
    TULAREMIA_VACCINE: 150;
    VACCINIA_IMMUNE_GLOBULIN: 151;
    VENEZUELAN_EQUINE_ENCEPHALITIS_LIVE_ATTENUATED: 152;
    AS03_ADJUVANT: 153;
    VENEZUELAN_EQUINE_ENCEPHALITIS_INACTIVATED: 154;
    ADENOVIRUS_VACCINE_UNSPECIFIED_FORMULATION: 155;
    HEPATITIS_A_VACCINE_PEDIATRIC_ADOLESCENT_DOSAGE_2_DOSE_SCHEDULE: 156;
    HEPATITIS_A_VACCINE_PEDIATRIC_ADOLESCENT_DOSAGE_3_DOSE_SCHEDULE: 157;
    HEPATITIS_A_VACCINE_UNSPECIFIED_FORMULATION: 158;
    IMMUNE_GLOBULIN_INTRAMUSCULAR: 159;
    IMMUNE_GLOBULIN_INTRAVENOUS: 160;
    INFLUENZA_VIRUS_VACCINE_UNSPECIFIED_FORMULATION: 161;
    POLIOVIRUS_VACCINE_UNSPECIFIED_FORMULATION: 162;
    RABIES_VACCINE_UNSPECIFIED_FORMULATION: 163;
    TYPHOID_VACCINE_UNSPECIFIED_FORMULATION: 164;
    VENEZUELAN_EQUINE_ENCEPHALITIS_VACCINE_UNSPECIFIED_FORMULATION: 165;
    RESPIRATORY_SYNCYTIAL_VIRUS_MONOCLONAL_ANTIBODY_PALIVIZUMAB_INTRAMUSCULAR: 166;
    MEASLES_MUMPS_RUBELLA_AND_VARICELLA_VIRUS_VACCINE: 167;
    TUBERCULIN_SKIN_TEST_OLD_TUBERCULIN_MULTIPUNCTURE_DEVICE: 168;
    TUBERCULIN_SKIN_TEST_PURIFIED_PROTEIN_DERIVATIVE_SOLUTION_INTRADERMAL: 169;
    TUBERCULIN_SKIN_TEST_PURIFIED_PROTEIN_DERIVATIVE_MULTIPUNCTURE_DEVICE: 170;
    TUBERCULIN_SKIN_TEST_UNSPECIFIED_FORMULATION: 171;
    NO_VACCINE_ADMINISTERED: 172;
  }

  export const Value: ValueMap;
}

export class USCoreVaccineNationalDrugCodeValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): USCoreVaccineNationalDrugCodeValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: USCoreVaccineNationalDrugCodeValueSet): USCoreVaccineNationalDrugCodeValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: USCoreVaccineNationalDrugCodeValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): USCoreVaccineNationalDrugCodeValueSet;
  static deserializeBinaryFromReader(message: USCoreVaccineNationalDrugCodeValueSet, reader: jspb.BinaryReader): USCoreVaccineNationalDrugCodeValueSet;
}

export namespace USCoreVaccineNationalDrugCodeValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    FLUZONE_INTRADERMAL_49281_0703_55: 1;
    TYPHIM_VI_49281_0790_20: 2;
    AFLURIA_QUADRIVALENT_33332_0316_01: 3;
    FLUZONE_INTRADERMAL_QUADRIVALENT_49281_0712_40: 4;
    FLUVIRIN_66521_0112_02: 5;
    HIBERIX_58160_0816_05: 6;
    PNEUMOVAX_23_00006_4837_02: 7;
    INFLUENZA_A_H5_N1_MONOVALENT_VACCINE_ADJUVANTED: 8;
    BOOSTRIX_58160_0842_51: 9;
    FLUZONE_QUADRIVALENT_49281_0418_50: 10;
    PNEUMOVAX_23_00006_4943_00: 11;
    FLUZONE_INTRADERMAL_QUADRIVALENT_49281_0708_40: 12;
    ENGERIX_B_54868_0734_00: 13;
    SHINGRIX_58160_0819_12: 14;
    FLUZONE_QUADRIVALENT_49281_0517_25: 15;
    TETANUS_AND_DIPHTHERIA_TOXOIDS_ADSORBED_00006_4133_41: 16;
    RAB_AVERT_50090_3096_00: 17;
    AFLURIA_33332_0118_10: 18;
    FLULAVAL_QUADRIVALENT_19515_0909_52: 19;
    INFLUENZA_A_H1N1_2009_MONOVALENT_VACCINE_49281_0650_10: 20;
    ENGERIX_B_58160_0820_11: 21;
    IXIARO_42515_0001_01: 22;
    FLUZONE_QUADRIVALENT_49281_0625_15: 23;
    FLUZONE_QUADRIVALENT_49281_0516_25: 24;
    FLUVIRIN_66521_0114_02: 25;
    FLULAVAL_QUADRIVALENT_19515_0896_11: 26;
    AFLURIA_33332_0117_10: 27;
    AFLURIA_QUADRIVALENT_33332_0416_10: 28;
    FLUVIRIN_66521_0118_02: 29;
    ENGERIX_B_58160_0821_11: 30;
    PREVNAR_13_00005_1971_05: 31;
    FLUMIST_66019_0109_10: 32;
    DIPHTHERIA_AND_TETANUS_TOXOIDS_ADSORBED_49281_0278_10: 33;
    FLUZONE_49281_0011_10: 34;
    RECOMBIVAX_HB_54868_2219_00: 35;
    FLUZONE_QUADRIVALENT_49281_0415_10: 36;
    AFLURIA_33332_0016_01: 37;
    FLUZONE_49281_0705_55: 38;
    FLUZONE_QUADRIVALENT_49281_0621_15: 39;
    BOOSTRIX_58160_0842_34: 40;
    FLUZONE_49281_0010_10: 41;
    FLUVIRIN_66521_0113_02: 42;
    FLUZONE_QUADRIVALENT_49281_0514_25: 43;
    BOOSTRIX_58160_0842_52: 44;
    FLULAVAL_QUADRIVALENT_19515_0901_52: 45;
    FLUCELVAX_62577_0613_01: 46;
    FLU_MIST_QUADRIVALENT_66019_0303_10: 47;
    FLUZONE_49281_0388_15: 48;
    VAQTA_00006_4841_41: 49;
    FLUARIX_QUADRIVALENT_58160_0900_52: 50;
    FLUCELVAX_QUADRIVALENT: 51;
    YF_VAX_49281_0915_05: 52;
    INFLUENZA_A_H1N1_2009_MONOVALENT_VACCINE_49281_0650_50: 53;
    AFLURIA_33332_0116_10: 54;
    PNEUMOVAX_23_54868_3339_01: 55;
    FLUZONE_QUADRIVALENT_49281_0418_10: 56;
    KINRIX_58160_0812_52: 57;
    DAPTACEL_49281_0286_05: 58;
    FLUCELVAX_63851_0612_01: 59;
    FLULAVAL_QUADRIVALENT_19515_0908_52: 60;
    M_M_R_II_54868_0980_00: 61;
    CERVARIX_58160_0830_52: 62;
    FLUZONE_49281_0113_25: 63;
    INFLUENZA_A_H1N1_2009_MONOVALENT_VACCINE_49281_0650_70: 64;
    FLUVIRIN_66521_0115_10: 65;
    FLUZONE_QUADRIVALENT_49281_0417_50: 66;
    AFLURIA_33332_0113_10: 67;
    FLUZONE_QUADRIVALENT_49281_0629_15: 68;
    SHINGRIX_58160_0823_11: 69;
    PEDVAX_HIB: 70;
    ENGERIX_B_58160_0821_34: 71;
    FLUVIRIN_66521_0115_02: 72;
    AFLURIA_33332_0014_01: 73;
    QUADRACEL: 74;
    FLUBLOK_42874_0014_10: 75;
    FLUBLOK_42874_0013_10: 76;
    AFLURIA_33332_0115_10: 77;
    ZOSTAVAX_00006_4963_00: 78;
    FLUZONE_49281_0010_25: 79;
    INFLUENZA_A_33332_0519_01: 80;
    FLUARIX_QUADRIVALENT_58160_0898_52: 81;
    FLUZONE_49281_0112_25: 82;
    FLULAVAL_QUADRIVALENT_19515_0898_11: 83;
    GARDASIL_00006_4109_09: 84;
    FLUZONE_QUADRIVALENT_49281_0414_50: 85;
    VAQTA_00006_4095_09: 86;
    GARDASIL_00006_4045_00: 87;
    FLULAVAL_QUADRIVALENT_19515_0912_52: 88;
    MENHIBRIX_58160_0801_11: 89;
    MENOMUNE_A_C_Y_W_135_COMBINED_49281_0489_01: 90;
    FLUBLOK_42874_0017_10: 91;
    FLUVIRIN_66521_0116_02: 92;
    MENVEO_46028_0208_01: 93;
    FLUZONE_QUADRIVALENT_49281_0627_15: 94;
    TRUMENBA_00005_0100_02: 95;
    VIVOTIF_69401_0000_01: 96;
    TETANUS_AND_DIPHTHERIA_TOXOIDS_ADSORBED_21695_0413_01: 97;
    FLUZONE_QUADRIVALENT_49281_0416_10: 98;
    INFLUENZA_A_H1N1_2009_MONOVALENT_VACCINE_49281_0650_25: 99;
    TETANUS_TOXOID_ADSORBED_49281_0800_83: 100;
    DECAVAC_49281_0291_83: 101;
    VAQTA_00006_4095_02: 102;
    ROTARIX: 103;
    FLULAVAL_19515_0889_07: 104;
    FLUZONE_49281_0392_15: 105;
    FLULAVAL_QUADRIVALENT_19515_0891_11: 106;
    ADACEL_49281_0400_05: 107;
    STAMARIL: 108;
    INFLUENZA_A_H1N1_2009_MONOVALENT_VACCINE_49281_0640_15: 109;
    FLUZONE_QUADRIVALENT_49281_0513_25: 110;
    PRO_QUAD_00006_4171_00: 111;
    VAQTA_00006_4096_09: 112;
    CERVARIX_58160_0830_34: 113;
    RECOMBIVAX_HB_00006_4980_00: 114;
    TETANUS_AND_DIPHTHERIA_TOXOIDS_ADSORBED_17478_0131_01: 115;
    FLUZONE_QUADRIVALENT_49281_0414_10: 116;
    HEPLISAV_B_43528_0002_05: 117;
    INFLUENZA_A_H1_N1_2009_MONOVALENT_VACCINE_66521_0200_02: 118;
    FLUZONE_49281_0011_50: 119;
    FLUVIRIN_70461_0120_10: 120;
    FLU_MIST_QUADRIVALENT_66019_0304_10: 121;
    BEXSERO_58160_0976_20: 122;
    VARIVAX_00006_4826_00: 123;
    FLUVIRIN_66521_0116_10: 124;
    ZOSTAVAX_00006_4963_41: 125;
    PENTACEL: 126;
    FLUBLOK_42874_0012_10: 127;
    MENVEO_58160_0955_09: 128;
    TRUMENBA_00005_0100_05: 129;
    FLUZONE_49281_0707_55: 130;
    TETANUS_AND_DIPHTHERIA_TOXOIDS_ADSORBED_14362_0111_04: 131;
    FLUVIRIN_66521_0112_10: 132;
    FLUVIRIN_66521_0117_10: 133;
    GARDASIL_00006_4045_41: 134;
    FLUZONE_HIGH_DOSE_49281_0389_65: 135;
    VIVOTIF_69401_0000_02: 136;
    YF_VAX_49281_0915_01: 137;
    RECOMBIVAX_HB_00006_4093_02: 138;
    TWINRIX_58160_0815_48: 139;
    VAXCHORA: 140;
    HAVRIX_58160_0826_11: 141;
    RECOMBIVAX_HB_00006_4992_00: 142;
    FLUZONE_49281_0111_25: 143;
    RECOMBIVAX_HB_00006_4093_09: 144;
    HEPLISAV_B_50090_3469_00: 145;
    FLUZONE_HIGH_DOSE_49281_0403_65: 146;
    FLUVIRIN_70461_0119_10: 147;
    RECOMBIVAX_HB_00006_4995_00: 148;
    TWINRIX_58160_0815_34: 149;
    FLUZONE_HIGH_DOSE_49281_0393_65: 150;
    PREVNAR: 151;
    AFLURIA_33332_0017_01: 152;
    RAB_AVERT_63851_0501_01: 153;
    FLUARIX_58160_0881_52: 154;
    BIO_THRAX: 155;
    FLUZONE_49281_0394_15: 156;
    VARIVAX_00006_4827_00: 157;
    HIBERIX_58160_0806_05: 158;
    FLUZONE_QUADRIVALENT_49281_0518_25: 159;
    IXIARO_62195_0051_10: 160;
    VAXELIS: 161;
    FLUZONE_INTRADERMAL_49281_0709_55: 162;
    FLU_MIST_QUADRIVALENT_66019_0300_10: 163;
    TENIVAC_49281_0215_15: 164;
    HAVRIX_58160_0825_52: 165;
    TRUMENBA_00005_0100_10: 166;
    FLUVIRIN_66521_0117_02: 167;
    INFLUENZA_A_H1N1_2009_MONOVALENT_VACCINE_49281_0650_90: 168;
    FLUBLOK_42874_0015_10: 169;
    AFLURIA_33332_0018_01: 170;
    PRO_QUAD_00006_4999_00: 171;
    PREVNAR_13_00005_1971_04: 172;
    FLULAVAL_19515_0850_52: 173;
    PREVNAR_13_00005_1971_02: 174;
    RECOMBIVAX_HB_00006_4094_02: 175;
    VAQTA_00006_4096_02: 176;
    HAVRIX_58160_0825_11: 177;
    PEDIARIX_58160_0811_52: 178;
    IXIARO_42515_0002_01: 179;
    FLUZONE_49281_0013_50: 180;
    MEDICAL_PROVIDER_SINGLE_USE_EZ_FLU_SHOT_2013_2014_76420_0483_01: 181;
    FLUVIRIN_66521_0118_10: 182;
    FLUZONE_HIGH_DOSE_49281_0399_65: 183;
    FLUZONE_49281_0396_15: 184;
    FLUMIST_66019_0107_01: 185;
    FLULAVAL_19515_0890_07: 186;
    MEDICAL_PROVIDER_SINGLE_USE_EZ_FLU_SHOT_2013_2014_76420_0482_01: 187;
    AFLURIA_33332_0015_01: 188;
    FLU_MIST_QUADRIVALENT_66019_0302_10: 189;
    FLUZONE_49281_0012_10: 190;
    FLUZONE_INTRADERMAL_QUADRIVALENT_49281_0710_40: 191;
    RAB_AVERT_63851_0501_02: 192;
    FLUARIX_58160_0879_52: 193;
    FLUZONE_HIGH_DOSE_49281_0397_65: 194;
    VAQTA_00006_4831_41: 195;
    TWINRIX_58160_0815_46: 196;
    AFLURIA_33332_0110_10: 197;
    PNEUMOVAX_23_54868_4320_00: 198;
    FLUBLOK_42874_0016_10: 199;
    FLUZONE_49281_0012_50: 200;
    HIBERIX_58160_0818_11: 201;
    FLUZONE_49281_0386_15: 202;
    BEXSERO_46028_0114_01: 203;
    COMVAX: 204;
    HAVRIX_58160_0826_52: 205;
    ACT_HIB_49281_0545_05: 206;
    FLUMIST_66019_0108_10: 207;
    FLUCELVAX_QUADRIVALENT_MULTI_DOSE_VIAL_70461_0418_10: 208;
    RECOMBIVAX_HB_00006_4094_09: 209;
    TRIPEDIA: 210;
    INFLUENZA_A_33332_0629_10: 211;
    FLUARIX_58160_0880_52: 212;
    ROTA_TEQ_00006_4047_20: 213;
    GARDASIL_9_00006_4119_02: 214;
    BOOSTRIX_58160_0842_11: 215;
    FLULAVAL_QUADRIVALENT_19515_0903_11: 216;
    RECOMBIVAX_HB_00006_4981_00: 217;
    FLUARIX_QUADRIVALENT_58160_0905_52: 218;
    FLUZONE_HIGH_DOSE_49281_0401_65: 219;
    AFLURIA_33332_0114_10: 220;
    IPOL_49281_0860_10: 221;
    FLUCELVAX_QUADRIVALENT_PREFILLED_SYRINGE_70461_0318_03: 222;
    RECOMBIVAX_HB_54868_2219_01: 223;
    FLUBLOK_QUADRIVALENT_49281_0718_10: 224;
    ADACEL_49281_0400_15: 225;
    FLUVIRIN_70461_0120_02: 226;
    FLUZONE_QUADRIVALENT_49281_0416_50: 227;
    FLUZONE_QUADRIVALENT_49281_0413_50: 228;
    FLUARIX_58160_0883_52: 229;
    TYPHIM_VI_49281_0790_51: 230;
    DAPTACEL_49281_0286_10: 231;
    FLU_MIST: 232;
    BEXSERO_46028_0114_02: 233;
    ENGERIX_B_58160_0821_52: 234;
    FLUZONE_49281_0013_10: 235;
    FLULAVAL_QUADRIVALENT_19515_0894_52: 236;
    FLU_MIST_QUADRIVALENT_66019_0305_10: 237;
    ADACEL_49281_0400_10: 238;
    FLUZONE_49281_0390_15: 239;
    BCG_VACCINE: 240;
    ADENOVIRUS_TYPE_4_AND_TYPE_7_VACCINE_LIVE: 241;
    AFLURIA_QUADRIVALENT_33332_0417_10: 242;
    FLUZONE_HIGH_DOSE_49281_0395_65: 243;
    FLU_MIST_QUADRIVALENT_66019_0301_10: 244;
    TENIVAC_49281_0215_10: 245;
    FLULAVAL_QUADRIVALENT_19515_0895_11: 246;
    FLUCELVAX_QUADRIVALENT_PREFILLED_SYRINGE_70461_0201_01: 247;
    FLUARIX_QUADRIVALENT_58160_0907_52: 248;
    HAVRIX_55045_3841_01: 249;
    INFANRIX_50090_2883_00: 250;
    TETANUS_TOXOID_ADSORBED_49281_0820_10: 251;
    FLUZONE_QUADRIVALENT_49281_0417_10: 252;
    AFLURIA_33332_0010_01: 253;
    AFLURIA_33332_0013_01: 254;
    INFLUENZA_A_H1_N1_2009_MONOVALENT_VACCINE_66521_0200_10: 255;
    BEXSERO_58160_0976_06: 256;
    MENHIBRIX_58160_0809_05: 257;
    PNEUMOVAX_23_00006_4739_00: 258;
    FLUAD_70461_0018_03: 259;
    FLUZONE_QUADRIVALENT_49281_0413_10: 260;
    TETANUS_AND_DIPHTHERIA_TOXOIDS_ADSORBED_13533_0131_01: 261;
    KINRIX_58160_0812_11: 262;
    FLUZONE_HIGH_DOSE_49281_0391_65: 263;
    FLULAVAL_19515_0845_11: 264;
    PEDIARIX_58160_0811_51: 265;
    TWINRIX_58160_0815_52: 266;
    FLUVIRIN_70461_0119_02: 267;
    INFANRIX_58160_0810_52: 268;
    FLUCELVAX_62577_0614_01: 269;
    FLUBLOK_QUADRIVALENT_42874_0117_10: 270;
    MENOMUNE_A_C_Y_W_135_COMBINED_49281_0489_91: 271;
    RAB_AVERT_58160_0964_12: 272;
    FLUZONE_49281_0014_50: 273;
    GARDASIL_00006_4109_02: 274;
    FLUAD_70461_0002_01: 275;
    DAPTACEL_49281_0286_01: 276;
    INFANRIX_58160_0810_11: 277;
    FLULAVAL_QUADRIVALENT_19515_0900_11: 278;
    PNEUMOVAX_23_00006_4837_03: 279;
    FLUVIRIN_66521_0113_10: 280;
    HAVRIX_58160_0826_34: 281;
    FLUARIX_QUADRIVALENT_58160_0903_52: 282;
    VAQTA_00006_4841_00: 283;
    FLUZONE_54868_6180_00: 284;
    M_M_R_II_00006_4681_00: 285;
    AFLURIA_QUADRIVALENT_33332_0317_01: 286;
    FLUAD_70461_0001_01: 287;
    MENACTRA: 288;
    FLUZONE_49281_0387_65: 289;
    IPOL_49281_0860_55: 290;
    FLULAVAL_19515_0893_07: 291;
    INFLUENZA_A_33332_0519_25: 292;
    FLUCELVAX_QUADRIVALENT_MULTI_DOSE_VIAL_70461_0301_10: 293;
    INFLUENZA_A_H1_N1_INTRANASAL: 294;
    HEPLISAV_B_43528_0003_05: 295;
    ENGERIX_B_58160_0820_52: 296;
    FLUAD_66521_0000_01: 297;
    IMOVAX_RABIES: 298;
    DECAVAC_49281_0291_10: 299;
    AFLURIA_QUADRIVALENT_33332_0418_10: 300;
    GARDASIL_9_00006_4121_02: 301;
    FLUCELVAX_63851_0613_01: 302;
    FLUVIRIN_66521_0114_10: 303;
    ROTA_TEQ_00006_4047_41: 304;
    FLUARIX_QUADRIVALENT_58160_0901_52: 305;
    AFLURIA_QUADRIVALENT_33332_0318_01: 306;
    GARDASIL_9_00006_4119_03: 307;
    DIPHTHERIA_AND_TETANUS_TOXOIDS_ADSORBED_49281_0225_10: 308;
    TWINRIX_58160_0815_11: 309;
    FLUZONE_54868_6177_00: 310;
    FLUZONE_49281_0010_50: 311;
    ADACEL_49281_0400_20: 312;
    ACT_HIB_49281_0545_03: 313;
    IPOL_50090_1693_09: 314;
    RECOMBIVAX_HB_00006_4995_41: 315;
  }

  export const Value: ValueMap;
}

export class UspsTwoLetterAlphabeticCodesValueSet extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UspsTwoLetterAlphabeticCodesValueSet.AsObject;
  static toObject(includeInstance: boolean, msg: UspsTwoLetterAlphabeticCodesValueSet): UspsTwoLetterAlphabeticCodesValueSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UspsTwoLetterAlphabeticCodesValueSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UspsTwoLetterAlphabeticCodesValueSet;
  static deserializeBinaryFromReader(message: UspsTwoLetterAlphabeticCodesValueSet, reader: jspb.BinaryReader): UspsTwoLetterAlphabeticCodesValueSet;
}

export namespace UspsTwoLetterAlphabeticCodesValueSet {
  export type AsObject = {
  }

  export interface ValueMap {
    INVALID_UNINITIALIZED: 0;
    AK: 1;
    AL: 2;
    AR: 3;
    AS: 4;
    AZ: 5;
    CA: 6;
    CO: 7;
    CT: 8;
    DC: 9;
    DE: 10;
    FL: 11;
    FM: 12;
    GA: 13;
    GU: 14;
    HI: 15;
    IA: 16;
    ID: 17;
    IL: 18;
    IN: 19;
    KS: 20;
    KY: 21;
    LA: 22;
    MA: 23;
    MD: 24;
    ME: 25;
    MH: 26;
    MI: 27;
    MN: 28;
    MO: 29;
    MP: 30;
    MS: 31;
    MT: 32;
    NC: 33;
    ND: 34;
    NE: 35;
    NH: 36;
    NJ: 37;
    NM: 38;
    NV: 39;
    NY: 40;
    OH: 41;
    OK: 42;
    OR: 43;
    PA: 44;
    PR: 45;
    PW: 46;
    RI: 47;
    SC: 48;
    SD: 49;
    TN: 50;
    TX: 51;
    UM: 52;
    UT: 53;
    VA: 54;
    VI: 55;
    VT: 56;
    WA: 57;
    WI: 58;
    WV: 59;
    WY: 60;
  }

  export const Value: ValueMap;
}

